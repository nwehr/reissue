{"version":3,"sources":["state/actions.ts","presentation/components/ProjectIcon.tsx","presentation/components/ProjectModal.tsx","presentation/components/ProjectList.tsx","state/store.ts","presentation/controllers/ProjectListController.ts","repos/localstorage/projectrepo.ts","presentation/components/Sidebar.tsx","repos/github/issuerepo.ts","repos/gitlab/issuerepo.ts","presentation/controllers/IssueListController.ts","repos/github/commentrepo.ts","presentation/controllers/CommentListController.ts","presentation/components/Comment.tsx","presentation/components/CommentList.tsx","presentation/components/Issue.tsx","presentation/components/IssueList.tsx","presentation/components/Project.tsx","App.js","index.js"],"names":["ActionType","ProjectIcon","props","schema","ProjectModal","useState","showModal","setShowModal","name","baseUrl","authToken","project","setProject","handleClose","Button","onClick","style","position","bottom","left","width","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","onChange","e","currentTarget","value","trim","Text","color","href","target","rel","as","Footer","variant","onSubmitNewProject","disabled","ProjectList","controller","getProjects","projects","setProjects","getSelectedProject","selectedProject","setSelectedProject","Nav","className","length","map","active","Link","selectProject","textAlign","margin","size","marginTop","createProject","SetSelectedProject","payload","initialState","store","createStore","state","action","ProjectListController","repo","this","getState","dispatch","LocalStroageProjectRepo","projectsStr","localStorage","getItem","JSON","parse","setItem","stringify","Sidebar","GithubIssueRepo","a","axios","get","headers","result","data","json","id","number","title","body","comments","Promise","resolve","reject","post","GitlabIssueRepo","resp","IssueListController","getIssues","createIssue","GithubCommentRepo","issueId","createdAt","created_at","updatedAt","updated_at","author","user","userName","login","CommentListController","getComments","createComment","CommentCard","moment","comment","format","Card","marginBottom","CommentList","setComments","myComment","setMyComment","error","setError","useEffect","fetch","handleSubmitComment","preventDefault","Comment","onSubmit","placeholder","Issue","issue","showComments","setShowComments","IssueList","issues","setIssues","myIssue","setMyIssue","useSelector","handleSubmitMyIssue","InputGroup","Append","Project","App","marginLeft","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bbcb67f.chunk.js","sourcesContent":["import { Project } from \"../core/entities/project\"\n\nexport enum ActionType {\n    SetSelectedProject\n}\n\nexport interface Action {\n    type: ActionType\n    payload: string | Project\n}\n\nexport function setSelectedProject(project: Project): Action {\n    return {\n        type: ActionType.SetSelectedProject\n        , payload: project\n    }\n}","import { FaGithub, FaGitlab, FaGitAlt } from \"react-icons/fa\"\nimport { SiGitea } from \"react-icons/si\"\n\ninterface ProjectIconProps {\n    schema: string\n}\n\nconst ProjectIcon = (props: ProjectIconProps) => {\n    switch (props.schema) {\n        case \"gitlab\":\n            return <FaGitlab />\n        case \"github\":\n            return <FaGithub />\n        case \"gitea\":\n            return <SiGitea />\n        default:\n            return <FaGitAlt />\n    }\n}\n\nexport default ProjectIcon","import { useState } from \"react\"\nimport { Button, Modal, Form } from \"react-bootstrap\"\nimport { Project } from \"../../core/entities/project\"\n\ninterface NewProjectModalProps {\n    onSubmitNewProject: (project: Project) => void\n}\n\nconst ProjectModal = (props: NewProjectModalProps) => {\n    const [showModal, setShowModal] = useState<boolean>(false)\n    const [project, setProject] = useState<Project>({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n\n    const handleShow = () => {\n        setProject({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n        setShowModal(true)\n    }\n\n    const handleClose = () => {\n        setShowModal(false)\n    }\n\n    const handleSave = () => {\n        props.onSubmitNewProject(project)\n        setShowModal(false)\n    }\n\n    const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, name: e.currentTarget.value })\n    }\n\n    const handleUpdateBaseUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, baseUrl: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateAuthToken = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, authToken: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateSchema = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setProject({ ...project, schema: e.currentTarget.value.trim() })\n    }\n\n    const valid = () => {\n        if (!project.name || !project.baseUrl || !project.authToken) {\n            return false\n        }\n\n        return true\n    }\n\n    return <>\n        <Button onClick={handleShow} style={{ position: \"absolute\", bottom: \"1em\", left: \"1em\", width: \"calc(100% - 2em)\" }}>Add Project</Button>\n\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"formName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateName} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBaseUrl\">\n                        <Form.Label>Base URL</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateBaseUrl} />\n                        <Form.Text style={{ color: \"gray\" }}>e.g. {\"https://api.github.com/repos/{owner}/{project}\"}</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Personal Access Token</Form.Label>\n                        <Form.Control type=\"password\" onChange={handleUpdateAuthToken} />\n                        <Form.Text style={{ color: \"gray\" }}>See <a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\" target=\"_blank\" rel=\"noreferrer\">docs</a> on creating a personal access token.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Schema</Form.Label>\n                        <Form.Control as=\"select\" onChange={handleUpdateSchema}>\n                            <option>github</option>\n                            <option>gitlab</option>\n                            <option>gitea</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave} disabled={!valid()}>\n                    Add Project\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default ProjectModal","import { useState } from \"react\"\nimport { Nav } from \"react-bootstrap\"\nimport { BsArrowDown } from \"react-icons/bs\"\nimport { Project } from \"../../core/entities/project\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport ProjectIcon from \"./ProjectIcon\"\nimport ProjectModal from \"./ProjectModal\"\n\nexport interface ProjectListProps {\n    controller: ProjectListController\n}\n\nconst ProjectList = (props: ProjectListProps) => {\n    const { controller } = props\n\n    const [projects, setProjects] = useState<Project[]>(controller.getProjects())\n    const [selectedProject, setSelectedProject] = useState<Project | null>(controller.getSelectedProject())\n\n    const handleCreateProject = (project: Project) => {\n        setProjects([...projects, controller.createProject(project)])\n    }\n\n    const handleSelectProject = (name: string) => () => {\n        setSelectedProject(controller.selectProject(name))\n    }\n\n    return <>\n        <Nav className=\"flex-column\">\n            {\n                projects.length\n                    ? projects.map((project: Project) => {\n                        const active = selectedProject ? selectedProject.name === project.name : false\n\n                        return <Nav.Link key={project.name} active={active} onClick={handleSelectProject(project.name)}>\n                            <ProjectIcon schema={project.schema} />{\" \"}{project.name}\n                        </Nav.Link>\n                    })\n                    : <div style={{ textAlign: \"center\", margin: \"1em\" }}>\n                        <span style={{ color: \"gray\" }}>Add your first project.</span>\n                        <div>\n                            <BsArrowDown size=\"1.5em\" color=\"gray\" style={{ marginTop: \"1.5em\" }} />\n                        </div>\n                    </div>\n            }\n        </Nav>\n\n        <ProjectModal onSubmitNewProject={handleCreateProject} />\n    </>\n}\n\n\n\nexport default ProjectList","import { createStore } from 'redux'\nimport { Project } from \"../core/entities/project\"\nimport { Action, ActionType } from \"./actions\"\n\nexport interface AppState {\n    selectedProject: Project | null\n}\n\nconst initialState: AppState = {\n    selectedProject: null\n}\n\nconst rootReducer = (state: AppState = initialState, action: Action): AppState => {\n    switch (action.type) {\n        case ActionType.SetSelectedProject:\n            return { ...state, selectedProject: action.payload as Project }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(rootReducer)\n\nexport default store","\nimport store from \"../../state/store\"\nimport { setSelectedProject } from \"../../state/actions\"\nimport { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class ProjectListController {\n    repo: IProjectRepo\n    \n    constructor(repo: IProjectRepo) {\n        this.repo = repo\n    }\n\n    getProjects(): Project[] {\n        return this.repo.getProjects()\n    }\n\n    createProject(project: Project): Project {\n        return this.repo.createProject(project)\n    }\n\n    getSelectedProject(): Project | null {\n        return store.getState().selectedProject\n    }\n\n    selectProject(name: string): Project | null {\n        const projects = this.getProjects()\n\n        for (let project of projects) {\n            if (project.name === name) {\n                store.dispatch(setSelectedProject(project))\n                return project\n            }\n        }\n\n        return null\n    }\n}","import { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class LocalStroageProjectRepo implements IProjectRepo {\n    getProjects(): Project[] {\n        const projectsStr = localStorage.getItem(\"projects\")\n\n        if (!projectsStr) {\n            return []\n        }\n\n        return JSON.parse(projectsStr)\n    }\n\n    createProject(project: Project): Project {\n        localStorage.setItem(\"projects\", JSON.stringify([...this.getProjects(), project]))\n        return project\n    }\n}","import ProjectList from \"./ProjectList\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport { LocalStroageProjectRepo } from \"../../repos/localstorage/projectrepo\"\n\ninterface SidebarProps {\n\n}\n\nconst Sidebar = (props: SidebarProps) => {\n    return <div className=\"sidebar\">\n        <ProjectList controller={new ProjectListController(new LocalStroageProjectRepo())} />\n    </div>\n}\n\nexport default Sidebar","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios from \"axios\"\n\nexport class GithubIssueRepo implements IIssueRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        try {\n            const result = await axios.get(this.baseUrl + \"/issues\", { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n\n            return result.data.map((json: any) => {\n                const { number, state, title, body, comments } = json\n                return { id: number, state, title, body, comments }\n            })\n        } catch (err) {\n            return new Promise((resolve, reject) => {\n                reject(\"Oops! Could not retrieve your issues.\")\n            })\n        }\n\n    }\n\n    async createIssue(title: string): Promise<Issue> {\n        try {\n            const result = await axios.post(this.baseUrl + \"/issues\", { title }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n            const { number, state, body, comments } = result.data\n            return { id: number, state, title: result.data.title, body, comments }\n        } catch (err) {\n            return new Promise((resolve, reject) => {\n                reject(\"Oops! Could not create an issues.\")\n            })\n        }\n    }\n}","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios from \"axios\"\n\nexport class GitlabIssueRepo implements IIssueRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        try {\n            const resp = await axios.get(this.baseUrl + \"/issues\", { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n\n            return resp.data.map((json: any) => {\n                const { id, state, title, body } = json\n                return { id, state, title, body, comments: 0 }\n            })\n        } catch (err) {\n            return new Promise((resolve, reject) => {\n                reject(\"Oops! Could not retrieve your issues.\")\n            })\n        }\n    }\n\n    async createIssue(title: string): Promise<Issue> {\n        try {\n            const result = await axios.post(this.baseUrl + \"/issues\", { title }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n            const { id, state, body } = result.data\n            return { id, state, title: result.data.title, body, comments: 0 }\n        } catch(err) {\n            return new Promise((resolve, reject) => {\n                reject(\"Oops! Could not create an issues.\")\n            })\n        }\n    }\n}","import { IIssueRepo, Issue } from \"../../core/entities/issue\";\nimport { GithubIssueRepo } from \"../../repos/github/issuerepo\";\nimport { GitlabIssueRepo } from \"../../repos/gitlab/issuerepo\";\nimport store from \"../../state/store\";\n\nexport class IssueListController {\n    repo: IIssueRepo | null\n\n    constructor() {\n        this.repo = null\n    }\n\n    getIssues(): Promise<Issue[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.getIssues()\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.getIssues()\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createIssue(title: string): Promise<Issue> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.createIssue(title)\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.createIssue(title)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport axios from \"axios\"\n\nexport class GithubCommentRepo implements ICommentRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getComments(issueId: number): Promise<Comment[]> {\n        const result = await axios.get(this.baseUrl + `/issues/${issueId}/comments`, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        return result.data.map((json: any) => {\n            return {\n                id: json.id\n                , body: json.body\n                , createdAt: json.created_at\n                , updatedAt: json.updated_at\n                , author: {\n                    id: json.user.id\n                    , userName: json.user.login\n                }\n            }\n        })\n    }\n\n    async createComment(issueId: number, body: string): Promise<Comment> {\n        const result = await axios.post(this.baseUrl + `/issues/${issueId}/comments`, { body }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        const json = result.data\n        \n        return {\n            id: json.id\n            , body: json.body\n            , createdAt: json.created_at\n            , updatedAt: json.updated_at\n            , author: {\n                id: json.user.id\n                , userName: json.user.login\n            }\n        }\n    }\n}","import { Comment } from \"../../core/entities/comment\";\nimport { GithubCommentRepo } from \"../../repos/github/commentrepo\";\nimport store from \"../../state/store\";\n\nexport class CommentListController {\n    getComments(issueId: number): Promise<Comment[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                return new Promise((resolve, reject) => {\n                    reject(\"Comments not implemented for gitlab.\")\n                })\n            }\n\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.getComments(issueId)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createComment(issueId: number, body: string): Promise<Comment> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                return new Promise((resolve, reject) => {\n                    reject(\"Comments not implemented for gitlab.\")\n                })\n            }\n\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.createComment(issueId, body)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Card } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport moment from \"moment\"\n\nexport interface CommentCardProps {\n    comment: Comment\n}\n\nconst CommentCard = (props: CommentCardProps) => {\n    const createdAt = moment(props.comment.createdAt).format(\"llll\")\n\n    return <Card style={{marginBottom: \"1em\"}}>\n        <Card.Body>\n            <Card.Text>{props.comment.body}</Card.Text>\n            <Card.Text style={{color: \"gray\"}}><b>{props.comment.author.userName}</b> commented on {createdAt}</Card.Text>\n        </Card.Body>\n    </Card>\n}\n\nexport default CommentCard","import React, { useEffect, useState } from \"react\"\nimport { Form, Button } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport { CommentListController } from \"../controllers/CommentListController\"\n\nimport CommentCard from \"./Comment\"\n\nexport interface CommentListProps {\n    issueId: number\n    controller: CommentListController\n}\n\nconst CommentList = (props: CommentListProps) => {\n    const [comments, setComments] = useState<Comment[]>([])\n    const [myComment, setMyComment] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        const fetch = async () => {\n            try {\n                setComments(await props.controller.getComments(props.issueId))\n            } catch(err) {\n                setError(err)\n            }\n        }\n\n        setError(null)\n        fetch()\n\n        return () => {\n            setComments([])\n            setError(null)\n        }\n    }, [props.controller, props.issueId])\n\n    const handleChangeComment = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMyComment(e.currentTarget.value)\n    }\n\n    const handleSubmitComment = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        setComments([...comments, await props.controller.createComment(props.issueId, myComment)])\n        setMyComment(\"\")\n    }\n\n    if (error) {\n        return <p>{error}</p>\n    }\n\n    return <>\n        {\n            comments.map((comment: Comment) => <CommentCard key={comment.id} comment={comment} />)\n        }\n\n        <Form onSubmit={handleSubmitComment}>\n            <Form.Group>\n                <Form.Control style={{margin: \"0 0 1em 0\"}} as=\"textarea\" placeholder=\"Leave a comment.\" value={myComment} onChange={handleChangeComment} />\n                <Button type=\"submit\" size=\"sm\">Comment</Button>\n            </Form.Group>\n        </Form>\n\n    </>\n}\n\nexport default CommentList","import { CSSProperties, useState } from \"react\"\nimport { Card } from \"react-bootstrap\"\nimport { Issue as IssueFields } from \"../../core/entities/issue\"\nimport { CommentListController } from \"../controllers/CommentListController\"\nimport CommentList from \"./CommentList\"\n\nconst idStyle: CSSProperties = {\n    color: \"gray\"\n    // , fontStyle: \"italic\"\n    // , fontSize: \"smaller\"\n}\n\nexport interface IssueProps {\n    issue: IssueFields\n}\n\nconst Issue = (props: IssueProps) => {\n    const { issue } = props\n    const [showComments, setShowComments] = useState<boolean>(false)\n\n    // return <div style={{ borderBottom: \"solid 1px gray\", marginBottom: \"1em\" }}>\n    //     <h5>{issue.title}</h5>\n    //     <p>\n    //         {\n    //             issue.body\n    //                 ? issue.body\n    //                 : <i style={{ color: \"gray\" }}>No description provided.</i>\n    //         }\n    //     </p>\n    //     {\n    //         showComments\n    //             ? <div>\n    //                 <CommentList issueId={issue.id} controller={new CommentListController()} />\n    //                 <span className=\"a text-primary\" onClick={() => setShowComments(false)}>Hide comments</span>\n    //             </div>\n    //             : <div>\n    //                 <span className=\"a text-primary\" onClick={() => setShowComments(true)}>Comments ({issue.comments})</span>\n    //             </div>\n\n    //     }\n    // </div>\n\n    return <Card style={{ marginBottom: \"1em\" }}>\n        <Card.Body>\n            <Card.Text>{issue.title}</Card.Text>\n            {\n                issue.body\n                    ? <Card.Text>{issue.body}</Card.Text>\n                    : <Card.Text><i style={{ color: \"gray\" }}>No description provided.</i></Card.Text>\n            }\n\n        </Card.Body>\n        <Card.Footer>\n            {\n                showComments\n                    ? <div>\n                        <CommentList issueId={issue.id} controller={new CommentListController()} />\n                        <span className=\"a text-primary\" onClick={() => setShowComments(false)}>Hide comments</span>\n                    </div>\n                    : <div>\n                        <span className=\"a text-primary\" onClick={() => setShowComments(true)}>Comments ({issue.comments})</span>\n                    </div>\n\n            }\n\n        </Card.Footer>\n    </Card>\n}\n\nexport default Issue","import React, { useEffect, useState } from \"react\"\nimport { Form, Button, InputGroup } from \"react-bootstrap\"\nimport { useSelector } from \"react-redux\"\nimport { Issue } from \"../../core/entities/issue\"\nimport { AppState } from \"../../state/store\"\n\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueCard from \"./Issue\"\n\nexport interface IssueListProps {\n    controller: IssueListController\n}\n\nconst IssueList = (props: IssueListProps) => {\n    const [issues, setIssues] = useState<Issue[]>([])\n    const [myIssue, setMyIssue] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const selectedProject = useSelector((state: AppState) => state.selectedProject)\n\n    useEffect(() => {\n        const fetch = async () => {\n            try {\n                setIssues(await props.controller.getIssues())\n            } catch(err) {\n                setError(err)\n            }\n        }\n\n        setIssues([])\n        setError(null)\n        \n        if (selectedProject?.name) {\n            fetch()\n        }\n    }, [props.controller, selectedProject?.name])\n\n    const handleUpdateMyIssue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMyIssue(e.currentTarget.value)\n    }\n\n    const handleSubmitMyIssue = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        setIssues([...issues, await props.controller.createIssue(myIssue)])\n        setMyIssue(\"\")\n    }\n\n    if (error) {\n        return <p className=\"text-danger\">{error}</p>\n    }\n\n    return <>\n        {\n            selectedProject\n                ? <Form style={{ marginBottom: \"1em\" }} onSubmit={handleSubmitMyIssue}>\n                    <InputGroup>\n                        <Form.Control value={myIssue} onChange={handleUpdateMyIssue} />\n                        <InputGroup.Append>\n                            <Button type=\"submit\">Add Issue</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Form>\n                : null\n        }\n\n\n        {\n            issues.map((issue: Issue) => <IssueCard key={issue.id} issue={issue} />)\n        }\n    </>\n}\n\nexport default IssueList","import { useSelector } from \"react-redux\"\nimport { AppState } from \"../../state/store\"\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueList from \"./IssueList\"\nimport ProjectIcon from \"./ProjectIcon\"\n\ninterface ProjectProps {\n\n}\n\nconst Project = (props: ProjectProps) => {\n    const selectedProject = useSelector((state: AppState) => state.selectedProject)\n\n    if (!selectedProject) {\n        return <>\n            <h4>Welcome to <b>ReIssue!</b></h4>\n            <p>ReIssue consolodates issue tracking from multiple repositories. So far its supports <a href=\"https://github.com\">Github</a>, <a href=\"https://gitlab.com\">Gitlab</a> and <a href=\"https://gitea.com\">Gitea</a>.</p>\n            <p>Get started by adding your first project!</p>\n        </>\n    }\n\n    return <>\n        <h4><ProjectIcon schema={selectedProject.schema} /> {selectedProject.name}</h4>\n        <p>{selectedProject.baseUrl}</p>\n\n        <IssueList controller={new IssueListController()} />\n    </>\n}\n\nexport default Project","import Sidebar from \"./presentation/components/Sidebar\"\nimport Project from \"./presentation/components/Project\"\n\nconst App = () => {\n\treturn <div>\n\t\t<Sidebar />\n\t\t<div style={{marginLeft: \"16em\"}}>\n\t\t\t<Project />\n\t\t</div>\n\t</div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\n\nimport store from \"./state/store\"\n\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}