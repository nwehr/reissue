{"version":3,"sources":["state/actions.ts","presentation/components/Topbar.tsx","presentation/components/ProjectIcon.tsx","presentation/components/ProjectModal.tsx","presentation/components/ProjectList.tsx","state/store.ts","presentation/controllers/ProjectListController.ts","repos/localstorage/projectrepo.ts","presentation/components/Sidebar.tsx","repos/github/issuerepo.ts","repos/gitlab/issuerepo.ts","presentation/controllers/IssueListController.ts","repos/github/commentrepo.ts","repos/gitlab/commentrepo.ts","presentation/controllers/CommentListController.ts","presentation/components/Comment.tsx","presentation/components/CommentList.tsx","presentation/components/IssueItem.tsx","presentation/components/IssueList.tsx","presentation/components/IssueModal.tsx","presentation/controllers/IssueModalController.ts","presentation/components/Project.tsx","App.js","index.js"],"names":["ActionType","Topbar","useAuth0","user","isAuthenticated","loginWithRedirect","logout","className","Button","style","float","onClick","picture","src","alt","name","ProjectIcon","props","schema","ProjectModal","useState","showModal","setShowModal","baseUrl","authToken","project","setProject","handleClose","position","bottom","left","width","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","onChange","e","currentTarget","value","trim","Text","color","href","target","rel","as","disabled","Footer","variant","onSubmitNewProject","ProjectList","controller","getProjects","projects","setProjects","getSelectedProject","selectedProject","setSelectedProject","Nav","length","map","active","Link","selectProject","textAlign","margin","size","marginTop","createProject","SetSelectedProject","payload","initialState","numProjects","numCreatedIssues","store","createStore","state","action","SetNumProjects","IncrementCreatedIssues","ProjectListController","repo","this","dispatch","getState","LocalStroageProjectRepo","projectsStr","localStorage","getItem","JSON","parse","sort","a","b","setItem","stringify","Sidebar","GithubIssueRepo","config","headers","axios","get","resp","data","issues","json","id","number","title","body","comments","filter","issue","Promise","_","reject","post","patch","GitlabIssueRepo","iid","put","IssueListController","getIssues","createIssue","closeIssue","GithubCommentRepo","issueId","createdAt","created_at","updatedAt","updated_at","author","userName","login","result","comment","delete","GitlabCommentRepo","username","CommentListController","getComments","createComment","deleteComment","CommentCard","moment","format","Card","marginBottom","onDeleteComment","CommentList","setComments","myComment","setMyComment","error","setError","deletedCommentIds","setDeletedCommentIds","useEffect","fetch","handleSubmitComment","preventDefault","handleDeleteComment","Comment","onSubmit","placeholder","IssueItem","onCloseIssue","showComments","setShowComments","numComments","IssueList","numIssues","useSelector","setIssues","closedIssueIds","setClosedIssueIds","fetchIssues","handleCloseIssue","IssueModal","issueTitle","setIssueTitle","issueBody","setIssueBody","handleSave","onCreatedNewIssue","marginRight","IssueModalController","Project","setNumIssues","Row","Col","md","App","isLoading","marginLeft","ReactDOM","render","domain","clientId","redirectUri","window","location","origin","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7055b8de.chunk.js","sourcesContent":["import { Project } from \"../core/entities/project\"\n\nexport enum ActionType {\n    SetSelectedProject\n    , SetNumProjects\n    , IncrementCreatedIssues\n}\n\nexport interface Action {\n    type: ActionType\n    payload: string | number | Project\n}\n\nexport const setSelectedProject = (project: Project): Action => {\n    return {\n        type: ActionType.SetSelectedProject\n        , payload: project\n    }\n}\n\nexport const setNumProjects = (numProjects: number): Action => {\n    return {\n        type: ActionType.SetNumProjects\n        , payload: numProjects\n    }\n}\n\nexport const incrementCreatedIssues = (numIssues: number): Action => {\n    return {\n        type: ActionType.IncrementCreatedIssues\n        , payload: 1\n    }\n}","import { useAuth0 } from \"@auth0/auth0-react\";\nimport { Button } from \"react-bootstrap\"\n\nconst Topbar = () => {\n    const { user, isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n    return <div className=\"topbar\">\n        {\n            isAuthenticated\n                ? <Button style={{ float: \"right\" }} onClick={() => logout()}>Logout</Button>\n                : <Button style={{ float: \"right\" }} onClick={() => loginWithRedirect()}>Login</Button>\n        }\n\n        {\n            isAuthenticated\n                ? <>\n                    {\n                        user?.picture\n                            ? <img src={user?.picture} alt=\"Profile\" className=\"profile-picture\" />\n                            : null\n                    }\n                    <p className=\"greeting\">Welcome, {user?.name}</p>\n                </>\n                : null\n        }\n    </div >\n}\n\nexport default Topbar","import { FaGithub, FaGitlab, FaGitAlt } from \"react-icons/fa\"\nimport { SiGitea } from \"react-icons/si\"\n\ninterface ProjectIconProps {\n    schema: string\n}\n\nconst ProjectIcon = (props: ProjectIconProps) => {\n    switch (props.schema) {\n        case \"gitlab\":\n            return <FaGitlab />\n        case \"github\":\n            return <FaGithub />\n        case \"gitea\":\n            return <SiGitea />\n        default:\n            return <FaGitAlt />\n    }\n}\n\nexport default ProjectIcon","import { useState } from \"react\"\nimport { Button, Modal, Form } from \"react-bootstrap\"\nimport { Project } from \"../../core/entities/project\"\n\ninterface NewProjectModalProps {\n    onSubmitNewProject: (project: Project) => void\n}\n\nconst ProjectModal = (props: NewProjectModalProps) => {\n    const [showModal, setShowModal] = useState<boolean>(false)\n    const [project, setProject] = useState<Project>({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n\n    const handleShow = () => {\n        setProject({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n        setShowModal(true)\n    }\n\n    const handleClose = () => {\n        setShowModal(false)\n    }\n\n    const handleSave = () => {\n        props.onSubmitNewProject(project)\n        setShowModal(false)\n    }\n\n    const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, name: e.currentTarget.value })\n    }\n\n    const handleUpdateBaseUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, baseUrl: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateAuthToken = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, authToken: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateSchema = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setProject({ ...project, schema: e.currentTarget.value.trim() })\n    }\n\n    const valid = () => {\n        if (!project.name || !project.baseUrl || !project.authToken) {\n            return false\n        }\n\n        return true\n    }\n\n    return <>\n        <Button onClick={handleShow} style={{ position: \"absolute\", bottom: \"1em\", left: \"1em\", width: \"calc(100% - 2em)\" }}>Add Project</Button>\n\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"formName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateName} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBaseUrl\">\n                        <Form.Label>Base URL</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateBaseUrl} />\n                        <Form.Text style={{ color: \"gray\" }}>{\"https://api.github.com/repos/{owner}/{repo}\"}</Form.Text>\n                        <Form.Text style={{ color: \"gray\" }}>{\"https://gitlab.com/api/v4/projects/{project_id}\"}</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Personal Access Token</Form.Label>\n                        <Form.Control type=\"password\" onChange={handleUpdateAuthToken} />\n                        <Form.Text style={{ color: \"gray\" }}>See <a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\" target=\"_blank\" rel=\"noreferrer\">docs</a> on creating a personal access token.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Schema</Form.Label>\n                        <Form.Control as=\"select\" onChange={handleUpdateSchema}>\n                            <option>github</option>\n                            <option>gitlab</option>\n                            <option>gitea</option>\n                            <option disabled>bitbucket</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave} disabled={!valid()}>\n                    Add Project\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default ProjectModal","import { useState } from \"react\"\nimport { Nav } from \"react-bootstrap\"\nimport { BsArrowDown } from \"react-icons/bs\"\nimport { Project } from \"../../core/entities/project\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport ProjectIcon from \"./ProjectIcon\"\nimport ProjectModal from \"./ProjectModal\"\n\nexport interface ProjectListProps {\n    controller: ProjectListController\n}\n\nconst ProjectList = (props: ProjectListProps) => {\n    const { controller } = props\n\n    const [projects, setProjects] = useState<Project[]>(controller.getProjects())\n    const [selectedProject, setSelectedProject] = useState<Project | null>(controller.getSelectedProject())\n\n    const handleCreateProject = (project: Project) => {\n        controller.createProject(project)\n        setProjects(controller.getProjects())\n    }\n\n    const handleSelectProject = (name: string) => () => {\n        setSelectedProject(controller.selectProject(name))\n    }\n\n    return <>\n        <Nav className=\"flex-column\">\n            {\n                projects.length\n                    ? projects.map((project: Project) => {\n                        const active = selectedProject ? selectedProject.name === project.name : false\n\n                        return <Nav.Link key={project.name} active={active} onClick={handleSelectProject(project.name)}>\n                            <ProjectIcon schema={project.schema} />{\" \"}{project.name}\n                        </Nav.Link>\n                    })\n                    : <div style={{ textAlign: \"center\", margin: \"1em\" }}>\n                        <span style={{ color: \"gray\" }}>Add your first project.</span>\n                        <div>\n                            <BsArrowDown size=\"1.5em\" color=\"gray\" style={{ marginTop: \"1.5em\" }} />\n                        </div>\n                    </div>\n            }\n        </Nav>\n\n        <ProjectModal onSubmitNewProject={handleCreateProject} />\n    </>\n}\n\n\n\nexport default ProjectList","import { createStore } from 'redux'\nimport { Project } from \"../core/entities/project\"\nimport { Action, ActionType } from \"./actions\"\n\nexport interface AppState {\n    selectedProject: Project | null\n    numProjects: number\n    numCreatedIssues: number\n}\n\nconst initialState: AppState = {\n    selectedProject: null\n    , numProjects: 0\n    , numCreatedIssues: 0\n}\n\nconst rootReducer = (state: AppState = initialState, action: Action): AppState => {\n    switch (action.type) {\n        case ActionType.SetSelectedProject:\n            return { ...state, selectedProject: action.payload as Project }\n        case ActionType.SetNumProjects:\n            return { ...state, numProjects: action.payload as number }\n        case ActionType.IncrementCreatedIssues:\n            return { ...state, numCreatedIssues: action.payload as number }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(rootReducer)\n\nexport default store","\nimport store from \"../../state/store\"\nimport { setSelectedProject, setNumProjects } from \"../../state/actions\"\nimport { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class ProjectListController {\n    repo: IProjectRepo\n    \n    constructor(repo: IProjectRepo) {\n        this.repo = repo\n    }\n\n    getProjects(): Project[] {\n        const projects = this.repo.getProjects()\n        store.dispatch(setNumProjects(projects.length))\n        return projects\n    }\n\n    createProject(project: Project): Project {\n        return this.repo.createProject(project)\n    }\n\n    getSelectedProject(): Project | null {\n        return store.getState().selectedProject\n    }\n\n    selectProject(name: string): Project | null {\n        const projects = this.getProjects()\n\n        for (let project of projects) {\n            if (project.name === name) {\n                store.dispatch(setSelectedProject(project))\n                return project\n            }\n        }\n\n        return null\n    }\n}","import { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class LocalStroageProjectRepo implements IProjectRepo {\n    getProjects(): Project[] {\n        const projectsStr = localStorage.getItem(\"projects\")\n\n        if (!projectsStr) {\n            return []\n        }\n\n        const projects: Project[] = JSON.parse(projectsStr)\n        \n        return projects.sort((a: Project, b: Project) => {\n            return a.name < b.name ? -1 : 1\n        })\n    }\n\n    createProject(project: Project): Project {\n        localStorage.setItem(\"projects\", JSON.stringify([...this.getProjects(), project]))\n        return project\n    }\n}","import ProjectList from \"./ProjectList\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport { LocalStroageProjectRepo } from \"../../repos/localstorage/projectrepo\"\n\ninterface SidebarProps {\n\n}\n\nconst Sidebar = (props: SidebarProps) => {\n    return <div className=\"sidebar\">\n        <ProjectList controller={new ProjectListController(new LocalStroageProjectRepo())} />\n    </div>\n}\n\nexport default Sidebar","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios, { AxiosRequestConfig } from \"axios\"\n\nexport class GithubIssueRepo implements IIssueRepo {\n    baseUrl: string\n    config: AxiosRequestConfig\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.config = {\n            headers: {\n                \"Authorization\": `Bearer ${authToken}`\n            }\n        }\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        try {\n            const resp = await axios.get(`${this.baseUrl}/issues`, this.config)\n            const { data } = resp\n\n            const issues = data.map((json: any) => {\n                return {\n                    id: json.number\n                    , state: json.state\n                    , title: json.title\n                    , body: json.body\n                    , comments: json.comments\n                }\n            })\n\n            return issues.filter((issue: Issue) => issue.state === \"open\")\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not retrieve issues.\")\n            })\n        }\n\n    }\n\n    async createIssue(title: string, body: string): Promise<Issue> {\n        try {\n            const resp = await axios.post(`${this.baseUrl}/issues`, { title, body }, this.config)\n            const { data } = resp\n\n            const issue = {\n                id: data.number\n                , state: data.state\n                , title: data.title\n                , body: data.body\n                , comments: data.comments\n            }\n\n            return issue\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not create an issues.\")\n            })\n        }\n    }\n\n    async closeIssue(id: number): Promise<boolean> {\n        try {\n            await axios.patch(`${this.baseUrl}/issues/${id}`, { state: \"closed\" }, this.config)\n            return true\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not close an issues.\")\n            })\n        }\n    }\n}","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios, { AxiosRequestConfig } from \"axios\"\n\nexport class GitlabIssueRepo implements IIssueRepo {\n    baseUrl: string\n    config: AxiosRequestConfig\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.config = {\n            headers: {\n                \"Authorization\": `Bearer ${authToken}`\n            }\n        }\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        try {\n            const resp = await axios.get(this.baseUrl + \"/issues?state=opened\", this.config)\n            const { data } = resp\n\n            const issues = data.map((json: any) => {\n                return {\n                    id: json.iid\n                    , state: json.state\n                    , title: json.title\n                    , body: json.body\n                    , comments: null\n                }\n            })\n\n            return issues\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not retrieve your issues.\")\n            })\n        }\n    }\n\n    async createIssue(title: string, body: string): Promise<Issue> {\n        try {\n            const resp = await axios.post(this.baseUrl + \"/issues\", { title, body }, this.config)\n            const { data } = resp\n\n            const issue = {\n                id: data.id\n                , state: data.state\n                , title: data.title\n                , body: data.body\n                , comments: null\n            }\n\n            return issue\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not create an issues.\")\n            })\n        }\n    }\n\n    async closeIssue(id: number): Promise<boolean> {\n        try {\n            await axios.put(`${this.baseUrl}/issues/${id}`, { \"state_event\": \"close\" }, this.config)\n            return true\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not close an issues.\")\n            })\n        }\n    }\n}","import { IIssueRepo, Issue } from \"../../core/entities/issue\";\nimport { GithubIssueRepo } from \"../../repos/github/issuerepo\";\nimport { GitlabIssueRepo } from \"../../repos/gitlab/issuerepo\";\nimport store from \"../../state/store\";\n\nexport class IssueListController {\n    repo: IIssueRepo | null\n\n    constructor() {\n        this.repo = null\n    }\n\n    getIssues(): Promise<Issue[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.getIssues()\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.getIssues()\n        }\n\n        return new Promise((_, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createIssue(title: string, body: string): Promise<Issue> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.createIssue(title, body)\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.createIssue(title, body)\n        }\n\n        return new Promise((_, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    closeIssue(id: number): Promise<boolean> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.closeIssue(id)\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.closeIssue(id)\n        }\n\n        return new Promise((_, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport axios, { AxiosRequestConfig } from \"axios\"\n\nexport class GithubCommentRepo implements ICommentRepo {\n    baseUrl: string\n    config: AxiosRequestConfig\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.config = {\n            headers: {\n                \"Authorization\": `Bearer ${authToken}`\n            }\n        }\n    }\n\n    async getComments(issueId: number): Promise<Comment[]> {\n        try {\n            const resp = await axios.get(`${this.baseUrl}/issues/${issueId}/comments`, this.config)\n            const { data } = resp\n\n            const comments = data.map((json: any) => {\n                return {\n                    id: json.id\n                    , body: json.body\n                    , createdAt: json.created_at\n                    , updatedAt: json.updated_at\n                    , author: {\n                        id: json.user.id\n                        , userName: json.user.login\n                    }\n                }\n            })\n\n            return comments\n\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not retrieve comments.\")\n            })\n        }\n    }\n\n    async createComment(issueId: number, body: string): Promise<Comment> {\n        try {\n            const result = await axios.post(`${this.baseUrl}/issues/${issueId}/comments`, { body }, this.config)\n            const { data } = result\n\n            const comment = {\n                id: data.id\n                , body: data.body\n                , createdAt: data.created_at\n                , updatedAt: data.updated_at\n                , author: {\n                    id: data.user.id\n                    , userName: data.user.login\n                }\n            }\n\n            return comment\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not create comment.\")\n            })\n        }\n    }\n\n    async deleteComment(issueId: number, id: number): Promise<boolean> {\n        try {\n            await axios.delete(`${this.baseUrl}/issues/comments/${id}`, this.config)\n            return true\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not delete comment.\")\n            })\n        }\n    }\n}","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport axios, { AxiosRequestConfig } from \"axios\"\n\nexport class GitlabCommentRepo implements ICommentRepo {\n    baseUrl: string\n    config: AxiosRequestConfig\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.config = {\n            headers: { \n                \"Authorization\": `Bearer ${authToken}`\n            }\n        }\n    }\n\n    async getComments(issueId: number): Promise<Comment[]> {\n        try {\n            const resp = await axios.get(`${this.baseUrl}/issues/${issueId}/notes`, this.config)\n            const { data } = resp\n    \n            const comments = data.map((json: any) => {\n                return {\n                    id: json.id\n                    , body: json.body\n                    , createdAt: json.created_at\n                    , updatedAt: json.updated_at\n                    , author: {\n                        id: json.author.id\n                        , userName: json.author.username\n                    }\n                }\n            })\n    \n            return comments\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not retrieve comments.\")\n            })\n        }\n    }\n\n    async createComment(issueId: number, body: string): Promise<Comment> {\n        try {\n            const resp = await axios.post(`${this.baseUrl}/issues/${issueId}/notes`, { body }, this.config)\n            const { data } = resp\n    \n            const comment = {\n                id: data.id\n                , body: data.body\n                , createdAt: data.created_at\n                , updatedAt: data.updated_at\n                , author: {\n                    id: data.author.id\n                    , userName: data.author.username\n                }\n            }\n    \n            return comment\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not create comments.\")\n            })\n        }\n    }\n\n    async deleteComment(issueId: number, id: number): Promise<boolean> {\n        try {\n            await axios.delete(`${this.baseUrl}/issues/${issueId}/notes/${id}`, this.config)\n            return true\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not delete comment.\")\n            })\n        }\n    }\n}","import { Comment } from \"../../core/entities/comment\";\nimport { GithubCommentRepo } from \"../../repos/github/commentrepo\";\nimport { GitlabCommentRepo } from \"../../repos/gitlab/commentrepo\";\nimport store from \"../../state/store\";\n\nexport class CommentListController {\n    getComments(issueId: number): Promise<Comment[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const { schema, baseUrl, authToken } = project\n\n            if (schema === \"gitlab\") {\n                const repo = new GitlabCommentRepo(baseUrl, authToken)\n                return repo.getComments(issueId)\n            }\n\n            const repo = new GithubCommentRepo(baseUrl, authToken)\n            return repo.getComments(issueId)\n        }\n\n        return new Promise((_, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createComment(issueId: number, body: string): Promise<Comment> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const { schema, baseUrl, authToken } = project\n\n            if (schema === \"gitlab\") {\n                const repo = new GitlabCommentRepo(baseUrl, authToken)\n                return repo.createComment(issueId, body)\n            }\n\n            const repo = new GithubCommentRepo(baseUrl, authToken)\n            return repo.createComment(issueId, body)\n        }\n\n        return new Promise((_, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    deleteComment(issueId: number, id: number): Promise<boolean> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const { schema, baseUrl, authToken } = project\n\n            if (schema === \"gitlab\") {\n                const repo = new GitlabCommentRepo(baseUrl, authToken)\n                return repo.deleteComment(issueId, id)\n            }\n\n            const repo = new GithubCommentRepo(baseUrl, authToken)\n            return repo.deleteComment(issueId, id)\n        }\n\n        return new Promise((_, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Card, Button } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport moment from \"moment\"\n\nexport interface CommentCardProps {\n    comment: Comment\n    onDeleteComment: (id: number) => void\n}\n\nconst CommentCard = (props: CommentCardProps) => {\n    const createdAt = moment(props.comment.createdAt).format(\"llll\")\n\n    return <Card style={{marginBottom: \"1em\"}}>\n        <Card.Body>\n            <Button variant=\"outline-danger\" size=\"sm\" style={{ float: \"right\" }} onClick={() => props.onDeleteComment(props.comment.id)} >Delete</Button>\n            <Card.Text>{props.comment.body}</Card.Text>\n            <Card.Text style={{color: \"gray\"}}><b>{props.comment.author.userName}</b> commented on {createdAt}</Card.Text>\n        </Card.Body>\n    </Card>\n}\n\nexport default CommentCard","import React, { useEffect, useState } from \"react\"\nimport { Form, Button } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport { CommentListController } from \"../controllers/CommentListController\"\n\nimport CommentCard from \"./Comment\"\n\nexport interface CommentListProps {\n    issueId: number\n    controller: CommentListController\n}\n\nconst CommentList = (props: CommentListProps) => {\n    const [comments, setComments] = useState<Comment[]>([])\n    const [myComment, setMyComment] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n    const [deletedCommentIds, setDeletedCommentIds] = useState<number[]>([])\n\n    useEffect(() => {\n        const fetch = async () => {\n            try {\n                setComments(await props.controller.getComments(props.issueId))\n            } catch(err) {\n                setError(err)\n            }\n        }\n\n        setError(null)\n        fetch()\n\n        return () => {\n            setComments([])\n            setError(null)\n        }\n    }, [props.controller, props.issueId])\n\n    const handleChangeComment = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMyComment(e.currentTarget.value)\n    }\n\n    const handleSubmitComment = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        if (!myComment.length) {\n            return\n        }\n\n        setComments([...comments, await props.controller.createComment(props.issueId, myComment)])\n        setMyComment(\"\")\n    }\n\n    const handleDeleteComment = async (id: number) => {\n        const success = await props.controller.deleteComment(props.issueId, id)\n\n        if (success) {\n            setDeletedCommentIds([...deletedCommentIds, id])\n        }\n    }\n\n    if (error) {\n        return <p>{error}</p>\n    }\n\n    return <>\n        {\n            comments\n                .filter((comment: Comment) => {\n                    for (let id of deletedCommentIds) {\n                        if (id === comment.id) {\n                            return false\n                        }\n                    }\n\n                    return true\n                })\n                .map((comment: Comment) => <CommentCard key={comment.id} comment={comment} onDeleteComment={handleDeleteComment} />)\n        }\n\n        <Form onSubmit={handleSubmitComment}>\n            <Form.Group>\n                <Form.Control style={{margin: \"0 0 1em 0\"}} as=\"textarea\" placeholder=\"Leave a comment.\" value={myComment} onChange={handleChangeComment} />\n                <Button type=\"submit\" size=\"sm\">Comment</Button>\n            </Form.Group>\n        </Form>\n\n    </>\n}\n\nexport default CommentList","import { useState } from \"react\"\nimport { Card, Button } from \"react-bootstrap\"\nimport { Issue } from \"../../core/entities/issue\"\nimport { CommentListController } from \"../controllers/CommentListController\"\nimport CommentList from \"./CommentList\"\n\nexport interface IssueItemProps {\n    issue: Issue\n    onCloseIssue: (id: number) => void\n}\n\nconst IssueItem = (props: IssueItemProps) => {\n    const { issue, onCloseIssue } = props\n    const [showComments, setShowComments] = useState<boolean>(false)\n\n    let numComments = \"\"\n\n    if (issue.comments !== null) {\n        numComments = ` (${issue.comments})`\n    }\n\n    return <Card style={{ marginBottom: \"1em\" }}>\n        <Card.Body>\n            <Button variant=\"outline-danger\" size=\"sm\" style={{ float: \"right\" }} onClick={() => onCloseIssue(issue.id)}>Close Issue</Button>\n            <Card.Text>{issue.title}</Card.Text>\n            {\n                issue.body\n                    ? <Card.Text style={{ color: \"gray\" }}>{issue.body}</Card.Text>\n                    : <Card.Text style={{ color: \"gray\" }}><i>No description provided.</i></Card.Text>\n            }\n        </Card.Body>\n        <Card.Footer>\n            {\n                showComments\n                    ? <div>\n                        <CommentList issueId={issue.id} controller={new CommentListController()} />\n                        <span className=\"a text-primary\" onClick={() => setShowComments(false)}>Hide comments</span>\n                    </div>\n                    : <div>\n                        <span className=\"a text-primary\" onClick={() => setShowComments(true)}>Comments{numComments}</span>\n                    </div>\n\n            }\n        </Card.Footer>\n    </Card>\n}\n\nexport default IssueItem","import { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Issue } from \"../../core/entities/issue\"\nimport { AppState } from \"../../state/store\"\n\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueItem from \"./IssueItem\"\n\nexport interface IssueListProps {\n    controller: IssueListController\n    numIssues: number\n}\n\nconst IssueList = (props: IssueListProps) => {\n    const { controller, numIssues } = props\n    const { selectedProject } = useSelector((state: AppState) => state)\n\n    const [issues, setIssues] = useState<Issue[]>([])\n    const [closedIssueIds, setClosedIssueIds] = useState<number[]>([])\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        const fetchIssues = async () => {\n            try {\n                setError(null)\n                setIssues(await controller.getIssues())\n            } catch (err) {\n                setError(err)\n            }\n        }\n\n        if (selectedProject?.name) {\n            fetchIssues()\n        }\n\n        return () => {\n            setIssues([])\n            setError(null)\n        }\n    }, [controller, selectedProject?.name, numIssues])\n\n    const handleCloseIssue = async (id: number) => {\n        const success = await controller.closeIssue(id)\n\n        if (success) {\n            setClosedIssueIds([...closedIssueIds, id])\n        }\n    }\n\n    if (error) {\n        return <p className=\"text-danger\">{error}</p>\n    }\n\n    return <>\n        {\n            issues\n                .filter((issue: Issue) => {\n                    for (let id of closedIssueIds) {\n                        if (id === issue.id) {\n                            return false\n                        }\n                    }\n\n                    return true\n                })\n                .map((issue: Issue) => {\n                    return <IssueItem key={issue.id} issue={issue} onCloseIssue={handleCloseIssue} />\n                })\n        }\n    </>\n}\n\nexport default IssueList","import { useState } from \"react\"\nimport { Button, Modal, Form } from \"react-bootstrap\"\nimport { IssueModalController } from \"../controllers/IssueModalController\"\n\ninterface IssueModalProps {\n    onCreatedNewIssue: () => void\n    controller: IssueModalController\n}\n\nconst IssueModal = (props: IssueModalProps) => {\n    const [showModal, setShowModal] = useState<boolean>(false)\n\n    const [issueTitle, setIssueTitle] = useState<string>(\"\")\n    const [issueBody, setIssueBody] = useState<string>(\"\")\n\n    const handleShow = () => {\n        setIssueTitle(\"\")\n        setIssueBody(\"\")\n        setShowModal(true)\n    }\n\n    const handleClose = () => {\n        setShowModal(false)\n    }\n\n    const handleSave = async () => {\n        await props.controller.createIssue(issueTitle, issueBody)\n        props.onCreatedNewIssue()\n        setShowModal(false)\n    }\n\n    const handleUpdateTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIssueTitle(e.currentTarget.value)\n    }\n\n    const handleUpdateBody = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIssueBody(e.currentTarget.value.trim())\n    }\n\n    const valid = () => {\n        if (!issueTitle) {\n            return false\n        }\n\n        return true\n    }\n\n    return <>\n        <Button onClick={handleShow} style={{ float: \"right\", marginRight: \".5em\" }}>New Issue</Button>\n\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Create Issue</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"issueFormTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateTitle} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"issueFormBody\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control as=\"textarea\" onChange={handleUpdateBody} />\n                        {/* <Form.Text style={{color: \"gray\"}}>Optional</Form.Text> */}\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave} disabled={!valid()}>\n                    Create Issue\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default IssueModal","import { Issue } from \"../../core/entities/issue\";\nimport { GithubIssueRepo } from \"../../repos/github/issuerepo\";\nimport { GitlabIssueRepo } from \"../../repos/gitlab/issuerepo\";\nimport store from \"../../state/store\";\nimport { incrementCreatedIssues } from \"../../state/actions\"\n\nexport class IssueModalController {\n    async createIssue(title: string, body: string): Promise<Issue> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const { baseUrl, authToken, schema } = project\n\n            if (schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(baseUrl, authToken)\n                return repo.createIssue(title, body)\n            }\n\n            const repo = new GithubIssueRepo(baseUrl, authToken)\n            const issue = await repo.createIssue(title, body)\n\n            // Launch nuclear missiles\n            store.dispatch(incrementCreatedIssues(1))\n\n            return issue\n        }\n\n        return new Promise((_, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Row, Col, Button } from \"react-bootstrap\"\nimport { AppState } from \"../../state/store\"\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueList from \"./IssueList\"\nimport ProjectIcon from \"./ProjectIcon\"\nimport IssueModal from \"./IssueModal\"\nimport { IssueModalController } from \"../controllers/IssueModalController\"\n\nconst Project = () => {\n    const { selectedProject, numProjects } = useSelector((state: AppState) => state)\n    const [numIssues, setNumIssues] = useState<number>(0)\n\n    if (!selectedProject) {\n        if (!numProjects) {\n            return <>\n                <h4>Welcome to <b>ReIssue!</b></h4>\n                <p>ReIssue consolodates issue tracking from multiple repositories. So far its supports <a href=\"https://github.com\">Github</a>, <a href=\"https://gitlab.com\">Gitlab</a> and <a href=\"https://gitea.com\">Gitea</a>.</p>\n                <p>Get started by adding your first project!</p>\n            </>\n        }\n\n        return <></>\n    }\n\n    return <>\n        <Row>\n            <Col md={6}>\n                <h4><ProjectIcon schema={selectedProject.schema} /> {selectedProject.name}</h4>\n                <p>{selectedProject.baseUrl}</p>\n            </Col>\n            <Col>\n                <Button style={{ float: \"right\" }} variant=\"secondary\" disabled>Project Settings</Button>\n                <IssueModal controller={new IssueModalController()} onCreatedNewIssue={() => setNumIssues(numIssues + 1)} />\n            </Col>\n        </Row>\n\n        <IssueList numIssues={numIssues} controller={new IssueListController()} />\n    </>\n}\n\nexport default Project","import { useAuth0 } from \"@auth0/auth0-react\";\nimport Topbar from \"./presentation/components/Topbar\"\nimport Sidebar from \"./presentation/components/Sidebar\"\nimport Project from \"./presentation/components/Project\"\n\nconst App = () => {\n\tconst { isAuthenticated, isLoading } = useAuth0();\n\n\tif (!isAuthenticated) {\n\t\treturn <>\n\t\t\t<Topbar />\n\t\t\t<div style={{ marginTop: \"4em\" }}>\n\t\t\t\t<h4>Welcome to <b>ReIssue!</b></h4>\n\t\t\t\t<p>ReIssue consolodates issue tracking from multiple repositories. So far its supports <a href=\"https://github.com\">Github</a>, <a href=\"https://gitlab.com\">Gitlab</a> and <a href=\"https://gitea.com\">Gitea</a>.</p>\n\t\t\t\t<p>Get started by adding your first project!</p>\n\t\t\t</div>\n\t\t</>\n\t}\n\n\tif (isLoading) {\n\t\treturn <p>Loading...</p>\n\t}\n\n\treturn <>\n\t\t<Topbar />\n\t\t<Sidebar />\n\t\t<div style={{ marginLeft: \"15em\", marginTop: \"4em\" }}>\n\t\t\t<Project />\n\t\t</div>\n\t</>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nimport App from './App';\n\nimport store from \"./state/store\"\n\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\n\nReactDOM.render(\n\t<Auth0Provider domain=\"dev-qbsxo4re.auth0.com\" clientId=\"EYSIZKcUxrh9Xpqlm6WwjiezS6v6rfXI\" redirectUri={window.location.origin + \"/reissue\"}>\n\t\t<Provider store={store}>\n\t\t\t<React.StrictMode>\n\t\t\t\t<App />\n\t\t\t</React.StrictMode>\n\t\t</Provider>\n\t</Auth0Provider>\n\t, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}