{"version":3,"sources":["state/actions.ts","repos/github/commentrepo.ts","state/store.ts","presentation/controllers/CommentListController.ts","presentation/components/Comment.tsx","presentation/components/CommentList.tsx","presentation/components/Issue.tsx","presentation/components/IssueList.tsx","presentation/components/ProjectList.tsx","presentation/controllers/ProjectListController.ts","repos/localstorage/projectrepo.ts","presentation/components/Sidebar.tsx","repos/github/issuerepo.ts","repos/gitlab/issuerepo.ts","presentation/controllers/IssueListController.ts","App.js","index.js"],"names":["ActionType","GithubCommentRepo","baseUrl","authToken","this","issueId","a","axios","get","headers","result","data","map","json","id","body","createdAt","created_at","updatedAt","updated_at","author","user","userName","login","post","setSelectedProject","project","type","SetSelectedProject","payload","initialState","selectedProject","store","createStore","state","action","CommentListController","getState","schema","Promise","resolve","reject","getComments","createComment","CommentCard","props","moment","comment","format","Card","style","marginBottom","Body","Text","CommentList","useState","comments","setComments","myComment","setMyComment","error","setError","useEffect","fetch","controller","handleSubmitComment","e","preventDefault","Comment","Form","onSubmit","Group","Control","margin","as","placeholder","value","onChange","currentTarget","Button","Issue","showComments","setShowComments","Title","issue","title","color","Footer","className","onClick","IssueList","issues","setIssues","myIssue","setMyIssue","useSelector","getIssues","name","handleSubmitMyIssue","createIssue","InputGroup","Append","NewProjectModal","showModal","setShowModal","setProject","handleClose","position","bottom","left","width","Modal","show","onHide","Header","closeButton","controlId","Label","trim","href","target","rel","variant","onSubmitNewProject","disabled","ProjectList","getProjects","projects","setProjects","getSelectedProject","Nav","length","active","Link","eventKey","selectProject","textAlign","size","marginTop","p","createProject","ProjectListController","repo","dispatch","LocalStroageProjectRepo","projectsStr","localStorage","getItem","JSON","parse","setItem","stringify","Sidebar","GithubIssueRepo","number","GitlabIssueRepo","resp","IssueListController","App","marginLeft","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b86488f0.chunk.js","sourcesContent":["import { Project } from \"../core/entities/project\"\n\nexport enum ActionType {\n    SetSelectedProject\n}\n\nexport interface Action {\n    type: ActionType\n    payload: string | Project\n}\n\nexport function setSelectedProject(project: Project): Action {\n    return {\n        type: ActionType.SetSelectedProject\n        , payload: project\n    }\n}","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport axios from \"axios\"\n\nexport class GithubCommentRepo implements ICommentRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getComments(issueId: number): Promise<Comment[]> {\n        const result = await axios.get(this.baseUrl + `/issues/${issueId}/comments`, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        return result.data.map((json: any) => {\n            return {\n                id: json.id\n                , body: json.body\n                , createdAt: json.created_at\n                , updatedAt: json.updated_at\n                , author: {\n                    id: json.user.id\n                    , userName: json.user.login\n                }\n            }\n        })\n    }\n\n    async createComment(issueId: number, body: string): Promise<Comment> {\n        const result = await axios.post(this.baseUrl + `/issues/${issueId}/comments`, { body }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        const json = result.data\n        \n        return {\n            id: json.id\n            , body: json.body\n            , createdAt: json.created_at\n            , updatedAt: json.updated_at\n            , author: {\n                id: json.user.id\n                , userName: json.user.login\n            }\n        }\n    }\n}","import { createStore } from 'redux'\nimport { Project } from \"../core/entities/project\"\nimport { Action, ActionType } from \"./actions\"\n\nexport interface AppState {\n    selectedProject: Project | null\n}\n\nconst initialState: AppState = {\n    selectedProject: null\n}\n\nconst rootReducer = (state: AppState = initialState, action: Action): AppState => {\n    switch (action.type) {\n        case ActionType.SetSelectedProject:\n            return { ...state, selectedProject: action.payload as Project }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(rootReducer)\n\nexport default store","import { Comment } from \"../../core/entities/comment\";\nimport { GithubCommentRepo } from \"../../repos/github/commentrepo\";\nimport store from \"../../state/store\";\n\nexport class CommentListController {\n    getComments(issueId: number): Promise<Comment[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                return new Promise((resolve, reject) => {\n                    reject(\"Comments not implemented for gitlab.\")\n                })\n            }\n\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.getComments(issueId)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createComment(issueId: number, body: string): Promise<Comment> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                return new Promise((resolve, reject) => {\n                    reject(\"Comments not implemented for gitlab.\")\n                })\n            }\n\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.createComment(issueId, body)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Card } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport moment from \"moment\"\n\nexport interface CommentCardProps {\n    comment: Comment\n}\n\nconst CommentCard = (props: CommentCardProps) => {\n    const createdAt = moment(props.comment.createdAt).format(\"llll\")\n\n    return <Card style={{marginBottom: \"1em\"}}>\n        <Card.Body>\n            <Card.Text>{props.comment.body}</Card.Text>\n            <Card.Text>{createdAt} <b>{props.comment.author.userName}</b></Card.Text>\n        </Card.Body>\n    </Card>\n}\n\nexport default CommentCard","import React, { useEffect, useState } from \"react\"\nimport { Form, Button } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport { CommentListController } from \"../controllers/CommentListController\"\n\nimport CommentCard from \"./Comment\"\n\nexport interface CommentListProps {\n    issueId: number\n    controller: CommentListController\n}\n\nconst CommentList = (props: CommentListProps) => {\n    const [comments, setComments] = useState<Comment[]>([])\n    const [myComment, setMyComment] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        const fetch = async () => {\n            try {\n                setComments(await props.controller.getComments(props.issueId))\n            } catch(err) {\n                setError(err)\n            }\n        }\n\n        setError(null)\n        fetch()\n    }, [props.controller, props.issueId])\n\n    const handleChangeComment = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMyComment(e.currentTarget.value)\n    }\n\n    const handleSubmitComment = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        setComments([...comments, await props.controller.createComment(props.issueId, myComment)])\n        setMyComment(\"\")\n    }\n\n    // const handleDeleteComment = (commentId: number) => async () => {\n        \n    // }\n\n    if (error) {\n        return <p>{error}</p>\n    }\n\n    return <>\n        {\n            comments.map((comment: Comment) => <CommentCard comment={comment} />)\n        }\n\n        <Form onSubmit={handleSubmitComment}>\n            <Form.Group>\n                <Form.Control style={{margin: \"0 0 1em 0\"}} as=\"textarea\" placeholder=\"Write your comment here...\" value={myComment} onChange={handleChangeComment} />\n                <Button type=\"submit\">Add Comment</Button>\n            </Form.Group>\n        </Form>\n\n    </>\n}\n\nexport default CommentList","import { useState } from \"react\"\nimport { Card } from \"react-bootstrap\"\nimport { Issue as IssueFields } from \"../../core/entities/issue\"\nimport { CommentListController } from \"../controllers/CommentListController\"\nimport CommentList from \"./CommentList\"\n\nexport interface IssueProps {\n    issue: IssueFields\n}\n\nconst Issue = (props: IssueProps) => {\n    const [showComments, setShowComments] = useState<boolean>(false)\n\n    return <Card style={{ marginBottom: \"1em\" }}>\n        <Card.Body>\n            <Card.Title>{props.issue.title}</Card.Title>\n            {\n                props.issue.body\n                    ? <Card.Text>{props.issue.body}</Card.Text>\n                    : <Card.Text><i style={{ color: \"gray\" }}>No description provided.</i></Card.Text>\n            }\n\n        </Card.Body>\n        <Card.Footer>\n            {\n                showComments\n                    ? <div>\n                        <CommentList issueId={props.issue.id} controller={new CommentListController()} />\n                        <span className=\"a text-primary\" onClick={() => setShowComments(false)}>Hide comments</span>\n                    </div>\n                    : <div>\n                        <span className=\"a text-primary\" onClick={() => setShowComments(true)}>Show comments ({props.issue.comments})</span>\n                    </div>\n\n            }\n\n        </Card.Footer>\n    </Card>\n}\n\nexport default Issue","import React, { useEffect, useState } from \"react\"\nimport { Form, Button, InputGroup } from \"react-bootstrap\"\nimport { useSelector } from \"react-redux\"\nimport { Issue } from \"../../core/entities/issue\"\nimport { AppState } from \"../../state/store\"\n\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueCard from \"./Issue\"\n\nexport interface IssueListProps {\n    controller: IssueListController\n}\n\nconst IssueList = (props: IssueListProps) => {\n    const [issues, setIssues] = useState<Issue[]>([])\n    const [myIssue, setMyIssue] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const selectedProject = useSelector((state: AppState) => state.selectedProject)\n\n    useEffect(() => {\n        const fetch = async () => {\n            try {\n                setIssues(await props.controller.getIssues())\n            } catch(err) {\n                setError(err)\n            }\n        }\n\n        setIssues([])\n        setError(null)\n        \n        if (selectedProject?.name) {\n            fetch()\n        }\n    }, [props.controller, selectedProject?.name])\n\n    const handleUpdateMyIssue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMyIssue(e.currentTarget.value)\n    }\n\n    const handleSubmitMyIssue = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        setIssues([...issues, await props.controller.createIssue(myIssue)])\n        setMyIssue(\"\")\n    }\n\n    if (error) {\n        return <p className=\"text-danger\">{error}</p>\n    }\n\n    return <>\n        {\n            selectedProject\n                ? <Form style={{ marginBottom: \"1em\" }} onSubmit={handleSubmitMyIssue}>\n                    <InputGroup>\n                        <Form.Control value={myIssue} onChange={handleUpdateMyIssue} />\n                        <InputGroup.Append>\n                            <Button type=\"submit\">Add Issue</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Form>\n                : null\n        }\n\n\n        {\n            issues.map((issue: Issue) => <IssueCard key={issue.id} issue={issue} />)\n        }\n    </>\n}\n\nexport default IssueList","import React, { useState } from \"react\"\nimport { Button, Modal, Form, Nav } from \"react-bootstrap\"\nimport { BsArrowDown } from \"react-icons/bs\"\nimport { FaGithub, FaGitlab } from \"react-icons/fa\"\nimport { Project } from \"../../core/entities/project\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\n\nexport interface ProjectListProps {\n    controller: ProjectListController\n}\n\nconst ProjectList = (props: ProjectListProps) => {\n    const { controller } = props\n    const [projects, setProjects] = useState<Project[]>(controller.getProjects())\n    const [selectedProject, setSelectedProject] = useState<Project | null>(controller.getSelectedProject())\n\n    const handleCreateProject = (project: Project) => {\n        const p = controller.createProject(project.name, project.baseUrl, project.authToken, project.schema)\n        setProjects([...projects, p])\n    }\n\n    const handleSelectProject = (name: string) => () => {\n        setSelectedProject(controller.selectProject(name))\n    }\n\n    return <>\n        <Nav className=\"flex-column\">\n            {\n                projects.length\n                    ? projects.map((project: Project) => {\n                        const active = selectedProject ? selectedProject.name === project.name : false\n\n                        return <Nav.Link key={project.name} active={active} eventKey={project.name} onClick={handleSelectProject(project.name)}>\n                            {\n                                project.schema === \"gitlab\"\n                                ? <FaGitlab />\n                                : <FaGithub />\n                            }\n                            {\" \"}{project.name}\n                        </Nav.Link>\n                    })\n                    : <div style={{ textAlign: \"center\", margin: \"1em\" }}>\n                        <span style={{ color: \"gray\" }}>Add your first project.</span>\n                        <div>\n                            <BsArrowDown size=\"1.5em\" color=\"gray\" style={{ marginTop: \"1.5em\" }} />\n                        </div>\n                    </div>\n            }\n        </Nav>\n\n        <NewProjectModal onSubmitNewProject={handleCreateProject} />\n    </>\n}\n\ninterface NewProjectModalProps {\n    onSubmitNewProject: (project: Project) => void\n}\n\nconst NewProjectModal = (props: NewProjectModalProps) => {\n    const [showModal, setShowModal] = useState<boolean>(false)\n    const [project, setProject] = useState<Project>({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n\n    const handleShow = () => {\n        setProject({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n        setShowModal(true)\n    }\n\n    const handleClose = () => {\n        setShowModal(false)\n    }\n\n    const handleSave = () => {\n        props.onSubmitNewProject(project)\n        setShowModal(false)\n    }\n\n    const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, name: e.currentTarget.value })\n    }\n\n    const handleUpdateBaseUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, baseUrl: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateAuthToken = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, authToken: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateSchema = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setProject({ ...project, schema: e.currentTarget.value.trim() })\n    }\n\n    const valid = () => {\n        if (!project.name || !project.baseUrl || !project.authToken) {\n            return false\n        }\n\n        return true\n    }\n\n    return <>\n        <Button onClick={handleShow} style={{ position: \"absolute\", bottom: \"1em\", left: \"1em\", width: \"calc(100% - 2em)\" }}>Add Project</Button>\n\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"formName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateName} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBaseUrl\">\n                        <Form.Label>Base URL</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateBaseUrl} />\n                        <Form.Text style={{ color: \"gray\" }}>e.g. {\"https://api.github.com/repos/{owner}/{project}\"}</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Personal Access Token</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateAuthToken} />\n                        <Form.Text style={{ color: \"gray\" }}>See <a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\" target=\"_blank\" rel=\"noreferrer\">docs</a> on creating a personal access token.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Schema</Form.Label>\n                        <Form.Control as=\"select\" onChange={handleUpdateSchema}>\n                            <option>github</option>\n                            <option>gitlab</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave} disabled={!valid()}>\n                    Add Project\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default ProjectList","\nimport store from \"../../state/store\"\nimport { setSelectedProject } from \"../../state/actions\"\nimport { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class ProjectListController {\n    repo: IProjectRepo\n    \n    constructor(repo: IProjectRepo) {\n        this.repo = repo\n    }\n\n    getProjects(): Project[] {\n        return this.repo.getProjects()\n    }\n\n    createProject(name: string, baseUrl: string, authToken: string, schema: string = \"github\"): Project {\n        return this.repo.createProject(name, baseUrl, authToken, schema)\n    }\n\n    getSelectedProject(): Project | null {\n        return store.getState().selectedProject\n    }\n\n    selectProject(name: string): Project | null {\n        const projects = this.getProjects()\n\n        for (let project of projects) {\n            if (project.name === name) {\n                store.dispatch(setSelectedProject(project))\n                return project\n            }\n        }\n\n        return null\n    }\n}","import { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class LocalStroageProjectRepo implements IProjectRepo {\n    getProjects(): Project[] {\n        const projectsStr = localStorage.getItem(\"projects\")\n\n        if (!projectsStr) {\n            return []\n        }\n\n        return JSON.parse(projectsStr)\n    }\n\n    createProject(name: string, baseUrl: string, authToken: string, schema: string = \"github\"): Project {\n        const project = { name, baseUrl, authToken, schema }\n        localStorage.setItem(\"projects\", JSON.stringify([...this.getProjects(), project]))\n        return project\n    }\n}","import ProjectList from \"./ProjectList\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport { LocalStroageProjectRepo } from \"../../repos/localstorage/projectrepo\"\n\ninterface SidebarProps {\n\n}\n\nconst Sidebar = (props: SidebarProps) => {\n    return <div className=\"sidebar\">\n        <ProjectList controller={new ProjectListController(new LocalStroageProjectRepo())} />\n    </div>\n}\n\nexport default Sidebar","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios from \"axios\"\n\nexport class GithubIssueRepo implements IIssueRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        try {\n            const result = await axios.get(this.baseUrl + \"/issues\", { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n\n            return result.data.map((json: any) => {\n                const { number, state, title, body, comments } = json\n                return { id: number, state, title, body, comments }\n            })\n        } catch(err) {\n            return new Promise((resolve, reject) => {\n                reject(\"Oops! Could not retrieve your issues.\")\n            })\n        }\n        \n    }\n\n    async createIssue(title: string): Promise<Issue> {\n        try {\n            const result = await axios.post(this.baseUrl + \"/issues\", { title }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n            const { number, state, body, comments} = result.data\n            return { id: number, state, title: result.data.title, body, comments }\n        } catch(err) {\n            return new Promise((resolve, reject) => {\n                reject(\"Oops! Could not create an issues.\")\n            })\n        }\n    }\n}","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios from \"axios\"\n\nexport class GitlabIssueRepo implements IIssueRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        try {\n            const resp = await axios.get(this.baseUrl + \"/issues\", { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n\n            return resp.data.map((json: any) => {\n                const { id, state, title, body } = json\n                return { id, state, title, body, comments: 0 }\n            })\n        } catch (err) {\n            return new Promise((resolve, reject) => {\n                reject(\"Oops! Could not retrieve your issues.\")\n            })\n        }\n    }\n\n    async createIssue(title: string): Promise<Issue> {\n        try {\n            const result = await axios.post(this.baseUrl + \"/issues\", { title }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n            const { id, state, body } = result.data\n            return { id, state, title: result.data.title, body, comments: 0 }\n        } catch(err) {\n            return new Promise((resolve, reject) => {\n                reject(\"Oops! Could not create an issues.\")\n            })\n        }\n    }\n}","import { IIssueRepo, Issue } from \"../../core/entities/issue\";\nimport { GithubIssueRepo } from \"../../repos/github/issuerepo\";\nimport { GitlabIssueRepo } from \"../../repos/gitlab/issuerepo\";\nimport store from \"../../state/store\";\n\nexport class IssueListController {\n    repo: IIssueRepo | null\n\n    constructor() {\n        this.repo = null\n    }\n\n    getIssues(): Promise<Issue[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.getIssues()\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.getIssues()\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createIssue(title: string): Promise<Issue> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.createIssue(title)\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.createIssue(title)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import IssueList from \"./presentation/components/IssueList\"\nimport Sidebar from \"./presentation/components/Sidebar\"\nimport { IssueListController } from \"./presentation/controllers/IssueListController\"\n\nconst App = () => {\n\treturn <div>\n\t\t<Sidebar />\n\t\t<div style={{marginLeft: \"16em\"}}>\n\t\t\t<IssueList controller={new IssueListController()} />\n\t\t</div>\n\t</div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\n\nimport store from \"./state/store\"\n\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}