{"version":3,"sources":["state/actions.ts","repos/github/commentrepo.ts","state/store.ts","presentation/controllers/CommentListController.ts","presentation/components/Comment.tsx","presentation/components/CommentList.tsx","presentation/components/Issue.tsx","presentation/components/IssueList.tsx","presentation/components/ProjectList.tsx","presentation/controllers/ProjectListController.ts","repos/localstorage/projectrepo.ts","presentation/components/Sidebar.tsx","repos/github/issuerepo.ts","presentation/controllers/IssueListController.ts","App.js","index.js"],"names":["ActionType","GithubCommentRepo","baseUrl","authToken","this","issueId","a","axios","get","headers","result","data","map","json","id","body","createdAt","created_at","updatedAt","updated_at","author","user","userName","login","post","setSelectedProject","project","type","SetSelectedProject","payload","initialState","selectedProject","store","createStore","state","action","CommentListController","getState","getComments","Promise","resolve","reject","createComment","CommentCard","props","moment","comment","format","Card","style","marginBottom","Body","Text","CommentList","useState","comments","setComments","myComment","setMyComment","useEffect","controller","fetch","handleSubmitComment","e","preventDefault","Comment","Form","onSubmit","Group","Control","margin","as","placeholder","value","onChange","currentTarget","Button","Issue","showComments","setShowComments","Title","issue","title","color","Footer","className","onClick","IssueList","issues","setIssues","myIssue","setMyIssue","useSelector","getIssues","name","handleSubmitMyIssue","createIssue","InputGroup","Append","NewProjectModal","showModal","setShowModal","schema","setProject","handleClose","position","bottom","left","width","Modal","show","onHide","Header","closeButton","controlId","Label","trim","href","target","disabled","variant","onSubmitNewProject","ProjectList","getProjects","projects","setProjects","getSelectedProject","Nav","length","active","Link","eventKey","selectProject","textAlign","size","marginTop","p","createProject","ProjectListController","repo","dispatch","LocalStroageProjectRepo","projectsStr","localStorage","getItem","JSON","parse","setItem","stringify","Sidebar","GithubIssueRepo","number","IssueListController","App","marginLeft","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f6ef398.chunk.js","sourcesContent":["import { Project } from \"../core/entities/project\"\n\nexport enum ActionType {\n    SetSelectedProject\n}\n\nexport interface Action {\n    type: ActionType\n    payload: string | Project\n}\n\nexport function setSelectedProject(project: Project): Action {\n    return {\n        type: ActionType.SetSelectedProject\n        , payload: project\n    }\n}","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport axios from \"axios\"\n\nexport class GithubCommentRepo implements ICommentRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getComments(issueId: number): Promise<Comment[]> {\n        const result = await axios.get(this.baseUrl + `/issues/${issueId}/comments`, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        return result.data.map((json: any) => {\n            return {\n                id: json.id\n                , body: json.body\n                , createdAt: json.created_at\n                , updatedAt: json.updated_at\n                , author: {\n                    id: json.user.id\n                    , userName: json.user.login\n                }\n            }\n        })\n    }\n\n    async createComment(issueId: number, body: string): Promise<Comment> {\n        const result = await axios.post(this.baseUrl + `/issues/${issueId}/comments`, { body }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        const json = result.data\n        \n        return {\n            id: json.id\n            , body: json.body\n            , createdAt: json.created_at\n            , updatedAt: json.updated_at\n            , author: {\n                id: json.user.id\n                , userName: json.user.login\n            }\n        }\n    }\n}","import { createStore } from 'redux'\nimport { Project } from \"../core/entities/project\"\nimport { Action, ActionType } from \"./actions\"\n\nexport interface AppState {\n    selectedProject: Project | null\n}\n\nconst initialState: AppState = {\n    selectedProject: null\n}\n\nconst rootReducer = (state: AppState = initialState, action: Action): AppState => {\n    switch (action.type) {\n        case ActionType.SetSelectedProject:\n            return { ...state, selectedProject: action.payload as Project }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(rootReducer)\n\nexport default store","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport { GithubCommentRepo } from \"../../repos/github/commentrepo\";\nimport store from \"../../state/store\";\n\nexport class CommentListController {\n    getComments(issueId: number): Promise<Comment[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.getComments(issueId)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createComment(issueId: number, body: string): Promise<Comment> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.createComment(issueId, body)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Card } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport moment from \"moment\"\n\nexport interface CommentCardProps {\n    comment: Comment\n}\n\nconst CommentCard = (props: CommentCardProps) => {\n    const createdAt = moment(props.comment.createdAt).format(\"llll\")\n\n    return <Card style={{marginBottom: \"1em\"}}>\n        <Card.Body>\n            <Card.Text>{props.comment.body}</Card.Text>\n            <Card.Text>{createdAt} <b>{props.comment.author.userName}</b></Card.Text>\n        </Card.Body>\n    </Card>\n}\n\nexport default CommentCard","import React, { useEffect, useState } from \"react\"\nimport { Form, Button } from \"react-bootstrap\"\nimport { Comment, ICommentRepo } from \"../../core/entities/comment\"\nimport { MemCommentRepo } from \"../../repos/commentrepo\"\nimport { CommentListController } from \"../controllers/CommentListController\"\n\nimport CommentCard from \"./Comment\"\n\nexport interface CommentListProps {\n    issueId: number\n    controller: CommentListController\n}\n\nconst CommentList = (props: CommentListProps) => {\n    const [comments, setComments] = useState<Comment[]>([])\n    const [myComment, setMyComment] = useState<string>(\"\")\n\n    useEffect(() => {\n        const fetch = async () => {\n            setComments(await props.controller.getComments(props.issueId))\n        }\n\n        fetch()\n    })\n\n    const handleChangeComment = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMyComment(e.currentTarget.value)\n    }\n\n    const handleSubmitComment = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        setComments([...comments, await props.controller.createComment(props.issueId, myComment)])\n        setMyComment(\"\")\n    }\n\n    const handleDeleteComment = (commentId: number) => async () => {\n        \n    }\n\n    return <>\n        {\n            comments.map((comment: Comment) => <CommentCard comment={comment} />)\n        }\n\n        <Form onSubmit={handleSubmitComment}>\n            <Form.Group>\n                <Form.Control style={{margin: \"0 0 1em 0\"}} as=\"textarea\" placeholder=\"Write your comment here...\" value={myComment} onChange={handleChangeComment} />\n                <Button type=\"submit\">Add Comment</Button>\n            </Form.Group>\n        </Form>\n\n    </>\n}\n\nexport default CommentList","import { useState } from \"react\"\nimport { Card } from \"react-bootstrap\"\nimport { Issue as IssueFields } from \"../../core/entities/issue\"\nimport { CommentListController } from \"../controllers/CommentListController\"\nimport CommentList from \"./CommentList\"\n\nexport interface IssueProps {\n    issue: IssueFields\n}\n\nconst Issue = (props: IssueProps) => {\n    const [showComments, setShowComments] = useState<boolean>(false)\n\n    return <Card style={{ marginBottom: \"1em\" }}>\n        <Card.Body>\n            <Card.Title>{props.issue.title}</Card.Title>\n            {\n                props.issue.body\n                    ? <Card.Text>{props.issue.body}</Card.Text>\n                    : <Card.Text><i style={{ color: \"gray\" }}>No description provided.</i></Card.Text>\n            }\n\n        </Card.Body>\n        <Card.Footer>\n            {\n                showComments\n                    ? <div>\n                        <CommentList issueId={props.issue.id} controller={new CommentListController()} />\n                        <span className=\"a text-primary\" onClick={() => setShowComments(false)}>Hide comments</span>\n                    </div>\n                    : <div>\n                        <span className=\"a text-primary\" onClick={() => setShowComments(true)}>Show comments ({props.issue.comments})</span>\n                    </div>\n\n            }\n\n        </Card.Footer>\n    </Card>\n}\n\nexport default Issue","import React, { useEffect, useState } from \"react\"\nimport { Form, Col, Button, InputGroup } from \"react-bootstrap\"\nimport { useSelector } from \"react-redux\"\nimport { Issue } from \"../../core/entities/issue\"\nimport { AppState } from \"../../state/store\"\n\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueCard from \"./Issue\"\n\nexport interface IssueListProps {\n    controller: IssueListController\n}\n\nconst IssueList = (props: IssueListProps) => {\n    const [issues, setIssues] = useState<Issue[]>([])\n    const [myIssue, setMyIssue] = useState<string>(\"\")\n\n    const selectedProject = useSelector((state: AppState) => state.selectedProject)\n\n    useEffect(() => {\n        const fetch = async () => {\n            setIssues(await props.controller.getIssues())\n        }\n\n        setIssues([])\n        fetch()\n    }, [selectedProject?.name])\n\n    const handleUpdateMyIssue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMyIssue(e.currentTarget.value)\n    }\n\n    const handleSubmitMyIssue = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        setIssues([...issues, await props.controller.createIssue(myIssue)])\n        setMyIssue(\"\")\n    }\n\n    return <>\n        {\n            selectedProject\n                ? <Form style={{ marginBottom: \"1em\" }} onSubmit={handleSubmitMyIssue}>\n                    <InputGroup>\n                        <Form.Control value={myIssue} onChange={handleUpdateMyIssue} />\n                        <InputGroup.Append>\n                            <Button type=\"submit\">Add Issue</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Form>\n                : null\n        }\n\n\n        {\n            issues.map((issue: Issue) => <IssueCard issue={issue} />)\n        }\n    </>\n}\n\nexport default IssueList","import React, { useState } from \"react\"\nimport { Button, Modal, Form, Nav } from \"react-bootstrap\"\nimport { BsArrowDown } from \"react-icons/bs\"\nimport { FaGithub, FaGitlab } from \"react-icons/fa\"\nimport { Project } from \"../../core/entities/project\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\n\nexport interface ProjectListProps {\n    controller: ProjectListController\n}\n\nconst ProjectList = (props: ProjectListProps) => {\n    const { controller } = props\n    const [projects, setProjects] = useState<Project[]>(controller.getProjects())\n    const [selectedProject, setSelectedProject] = useState<Project | null>(controller.getSelectedProject())\n\n    const handleCreateProject = (project: Project) => {\n        const p = controller.createProject(project.name, project.baseUrl, project.authToken, project.schema)\n        setProjects([...projects, p])\n    }\n\n    const handleSelectProject = (name: string) => () => {\n        setSelectedProject(controller.selectProject(name))\n    }\n\n    return <>\n        <Nav className=\"flex-column\">\n            {\n                projects.length\n                    ? projects.map((project: Project) => {\n                        const active = selectedProject ? selectedProject.name == project.name : false\n\n                        return <Nav.Link active={active} eventKey={project.name} onClick={handleSelectProject(project.name)}>\n                            <FaGithub /> {project.name}\n                        </Nav.Link>\n                    })\n                    : <div style={{ textAlign: \"center\", margin: \"1em\" }}>\n                        <span style={{ color: \"gray\" }}>Add your first project.</span>\n                        <div>\n                            <BsArrowDown size=\"1.5em\" color=\"gray\" style={{ marginTop: \"1.5em\" }} />\n                        </div>\n                    </div>\n            }\n        </Nav>\n\n        <NewProjectModal onSubmitNewProject={handleCreateProject} />\n    </>\n}\n\ninterface NewProjectModalProps {\n    onSubmitNewProject: (project: Project) => void\n}\n\nconst NewProjectModal = (props: NewProjectModalProps) => {\n    const [showModal, setShowModal] = useState<boolean>(false)\n    const [project, setProject] = useState<Project>({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n\n    const handleShow = () => {\n        setProject({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n        setShowModal(true)\n    }\n\n    const handleClose = () => {\n        setShowModal(false)\n    }\n\n    const handleSave = () => {\n        props.onSubmitNewProject(project)\n        setShowModal(false)\n    }\n\n    const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, name: e.currentTarget.value })\n    }\n\n    const handleUpdateBaseUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, baseUrl: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateAuthToken = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, authToken: e.currentTarget.value.trim() })\n    }\n\n    const valid = () => {\n        if (!project.name || !project.baseUrl || !project.authToken) {\n            return false\n        }\n\n        return true\n    }\n\n    return <>\n        <Button onClick={handleShow} style={{ position: \"absolute\", bottom: \"1em\", left: \"1em\", width: \"calc(100% - 2em)\" }}>Add Project</Button>\n\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"formName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateName} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBaseUrl\">\n                        <Form.Label>Base URL</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateBaseUrl} />\n                        <Form.Text style={{ color: \"gray\" }}>e.g. {\"https://api.github.com/repos/{owner}/{project}\"}</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Personal Access Token</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateAuthToken} />\n                        <Form.Text style={{ color: \"gray\" }}>See <a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\" target=\"_blank\">docs</a> on creating a personal access token.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Schema</Form.Label>\n                        <Form.Control as=\"select\" disabled>\n                            <option>github</option>\n                            <option>gitlab</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave} disabled={!valid()}>\n                    Add Project\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default ProjectList","\nimport store from \"../../state/store\"\nimport { setSelectedProject } from \"../../state/actions\"\nimport { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class ProjectListController {\n    repo: IProjectRepo\n    \n    constructor(repo: IProjectRepo) {\n        this.repo = repo\n    }\n\n    getProjects(): Project[] {\n        return this.repo.getProjects()\n    }\n\n    createProject(name: string, baseUrl: string, authToken: string, schema: string = \"github\"): Project {\n        return this.repo.createProject(name, baseUrl, authToken, schema)\n    }\n\n    getSelectedProject(): Project | null {\n        return store.getState().selectedProject\n    }\n\n    selectProject(name: string): Project | null {\n        const projects = this.getProjects()\n\n        for (let project of projects) {\n            if (project.name == name) {\n                store.dispatch(setSelectedProject(project))\n                return project\n            }\n        }\n\n        return null\n    }\n}","import { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class LocalStroageProjectRepo implements IProjectRepo {\n    getProjects(): Project[] {\n        const projectsStr = localStorage.getItem(\"projects\")\n\n        if (!projectsStr) {\n            return []\n        }\n\n        return JSON.parse(projectsStr)\n    }\n\n    createProject(name: string, baseUrl: string, authToken: string, schema: string = \"github\"): Project {\n        const project = { name, baseUrl, authToken, schema }\n        localStorage.setItem(\"projects\", JSON.stringify([...this.getProjects(), project]))\n        return project\n    }\n}","import React from \"react\"\nimport { Nav, NavDropdown } from \"react-bootstrap\"\n\nimport ProjectList from \"./ProjectList\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport { LocalStroageProjectRepo } from \"../../repos/localstorage/projectrepo\"\n\ninterface SidebarProps {\n\n}\n\nconst Sidebar = (props: SidebarProps) => {\n    return <div className=\"sidebar\">\n        <ProjectList controller={new ProjectListController(new LocalStroageProjectRepo())} />\n    </div>\n}\n\nexport default Sidebar","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios from \"axios\"\n\nexport class GithubIssueRepo implements IIssueRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        const result = await axios.get(this.baseUrl + \"/issues\", { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n\n        return result.data.map((json: any) => {\n            const { number, state, title, body, comments } = json\n            return { id: number, state, title, body, comments }\n        })\n    }\n\n    async createIssue(title: string): Promise<Issue> {\n        const result = await axios.post(this.baseUrl + \"/issues\", { title }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        const { number, state, body, comments} = result.data\n        return { id: number, state, title: result.data.title, body, comments }\n    }\n}","import { IIssueRepo, Issue } from \"../../core/entities/issue\";\nimport { GithubIssueRepo } from \"../../repos/github/issuerepo\";\nimport store from \"../../state/store\";\n\nexport class IssueListController {\n    repo: IIssueRepo | null\n\n    constructor() {\n        this.repo = null\n    }\n\n    getIssues(): Promise<Issue[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.getIssues()\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createIssue(title: string): Promise<Issue> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.createIssue(title)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Row, Col } from \"react-bootstrap\"\nimport IssueList from \"./presentation/components/IssueList\"\nimport { MemIssueRepo } from \"./repos/issuerepo\"\nimport Sidebar from \"./presentation/components/Sidebar\"\nimport { IssueListController } from \"./presentation/controllers/IssueListController\"\n\nconst App = () => {\n\treturn <div>\n\t\t<Sidebar />\n\t\t<div style={{marginLeft: \"16em\"}}>\n\t\t\t<IssueList controller={new IssueListController()} />\n\t\t</div>\n\t</div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\n\nimport store from \"./state/store\"\n\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}