{"version":3,"sources":["state/actions.ts","presentation/components/ProjectIcon.tsx","presentation/components/ProjectModal.tsx","presentation/components/ProjectList.tsx","state/store.ts","presentation/controllers/ProjectListController.ts","repos/localstorage/projectrepo.ts","presentation/components/Sidebar.tsx","repos/github/issuerepo.ts","repos/gitlab/issuerepo.ts","presentation/controllers/IssueListController.ts","repos/github/commentrepo.ts","presentation/controllers/CommentListController.ts","presentation/components/Comment.tsx","presentation/components/CommentList.tsx","presentation/components/Issue.tsx","presentation/components/IssueList.tsx","presentation/components/IssueModal.tsx","presentation/controllers/IssueModalController.ts","presentation/components/Project.tsx","App.js","index.js"],"names":["ActionType","ProjectIcon","props","schema","ProjectModal","useState","showModal","setShowModal","name","baseUrl","authToken","project","setProject","handleClose","Button","onClick","style","position","bottom","left","width","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","onChange","e","currentTarget","value","trim","Text","color","href","target","rel","as","Footer","variant","onSubmitNewProject","disabled","ProjectList","controller","getProjects","projects","setProjects","getSelectedProject","selectedProject","setSelectedProject","Nav","className","length","map","active","Link","selectProject","textAlign","margin","size","marginTop","createProject","SetSelectedProject","payload","initialState","numProjects","numCreatedIssues","store","createStore","state","action","SetNumProjects","IncrementCreatedIssues","ProjectListController","repo","this","dispatch","getState","LocalStroageProjectRepo","projectsStr","localStorage","getItem","JSON","parse","sort","a","b","setItem","stringify","Sidebar","GithubIssueRepo","config","headers","axios","get","resp","data","issues","json","id","number","title","body","comments","Promise","_","reject","post","issue","GitlabIssueRepo","IssueListController","getIssues","resolve","createIssue","GithubCommentRepo","issueId","result","createdAt","created_at","updatedAt","updated_at","author","user","userName","login","CommentListController","getComments","createComment","CommentCard","moment","comment","format","Card","marginBottom","CommentList","setComments","myComment","setMyComment","error","setError","useEffect","fetch","handleSubmitComment","preventDefault","Comment","onSubmit","placeholder","Issue","showComments","setShowComments","IssueList","setIssues","useSelector","fetchIssues","IssueModal","issueTitle","setIssueTitle","issueBody","setIssueBody","handleSave","onCreatedNewIssue","float","marginRight","IssueModalController","Project","setNumCreatedIssues","Row","Col","md","App","marginLeft","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e98530ed.chunk.js","sourcesContent":["import { Project } from \"../core/entities/project\"\n\nexport enum ActionType {\n    SetSelectedProject\n    , SetNumProjects\n    , IncrementCreatedIssues\n}\n\nexport interface Action {\n    type: ActionType\n    payload: string | number | Project\n}\n\nexport const setSelectedProject = (project: Project): Action => {\n    return {\n        type: ActionType.SetSelectedProject\n        , payload: project\n    }\n}\n\nexport const setNumProjects = (numProjects: number): Action => {\n    return {\n        type: ActionType.SetNumProjects\n        , payload: numProjects\n    }\n}\n\nexport const incrementCreatedIssues = (numIssues: number): Action => {\n    return {\n        type: ActionType.IncrementCreatedIssues\n        , payload: 1\n    }\n}","import { FaGithub, FaGitlab, FaGitAlt } from \"react-icons/fa\"\nimport { SiGitea } from \"react-icons/si\"\n\ninterface ProjectIconProps {\n    schema: string\n}\n\nconst ProjectIcon = (props: ProjectIconProps) => {\n    switch (props.schema) {\n        case \"gitlab\":\n            return <FaGitlab />\n        case \"github\":\n            return <FaGithub />\n        case \"gitea\":\n            return <SiGitea />\n        default:\n            return <FaGitAlt />\n    }\n}\n\nexport default ProjectIcon","import { useState } from \"react\"\nimport { Button, Modal, Form } from \"react-bootstrap\"\nimport { Project } from \"../../core/entities/project\"\n\ninterface NewProjectModalProps {\n    onSubmitNewProject: (project: Project) => void\n}\n\nconst ProjectModal = (props: NewProjectModalProps) => {\n    const [showModal, setShowModal] = useState<boolean>(false)\n    const [project, setProject] = useState<Project>({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n\n    const handleShow = () => {\n        setProject({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n        setShowModal(true)\n    }\n\n    const handleClose = () => {\n        setShowModal(false)\n    }\n\n    const handleSave = () => {\n        props.onSubmitNewProject(project)\n        setShowModal(false)\n    }\n\n    const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, name: e.currentTarget.value })\n    }\n\n    const handleUpdateBaseUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, baseUrl: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateAuthToken = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, authToken: e.currentTarget.value.trim() })\n    }\n\n    const handleUpdateSchema = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setProject({ ...project, schema: e.currentTarget.value.trim() })\n    }\n\n    const valid = () => {\n        if (!project.name || !project.baseUrl || !project.authToken) {\n            return false\n        }\n\n        return true\n    }\n\n    return <>\n        <Button onClick={handleShow} style={{ position: \"absolute\", bottom: \"1em\", left: \"1em\", width: \"calc(100% - 2em)\" }}>Add Project</Button>\n\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"formName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateName} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBaseUrl\">\n                        <Form.Label>Base URL</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateBaseUrl} />\n                        <Form.Text style={{ color: \"gray\" }}>e.g. {\"https://api.github.com/repos/{owner}/{project}\"}</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Personal Access Token</Form.Label>\n                        <Form.Control type=\"password\" onChange={handleUpdateAuthToken} />\n                        <Form.Text style={{ color: \"gray\" }}>See <a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\" target=\"_blank\" rel=\"noreferrer\">docs</a> on creating a personal access token.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Schema</Form.Label>\n                        <Form.Control as=\"select\" onChange={handleUpdateSchema}>\n                            <option>github</option>\n                            <option>gitlab</option>\n                            <option>gitea</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave} disabled={!valid()}>\n                    Add Project\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default ProjectModal","import { useState } from \"react\"\nimport { Nav } from \"react-bootstrap\"\nimport { BsArrowDown } from \"react-icons/bs\"\nimport { Project } from \"../../core/entities/project\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport ProjectIcon from \"./ProjectIcon\"\nimport ProjectModal from \"./ProjectModal\"\n\nexport interface ProjectListProps {\n    controller: ProjectListController\n}\n\nconst ProjectList = (props: ProjectListProps) => {\n    const { controller } = props\n\n    const [projects, setProjects] = useState<Project[]>(controller.getProjects())\n    const [selectedProject, setSelectedProject] = useState<Project | null>(controller.getSelectedProject())\n\n    const handleCreateProject = (project: Project) => {\n        controller.createProject(project)\n        setProjects(controller.getProjects())\n    }\n\n    const handleSelectProject = (name: string) => () => {\n        setSelectedProject(controller.selectProject(name))\n    }\n\n    return <>\n        <Nav className=\"flex-column\">\n            {\n                projects.length\n                    ? projects.map((project: Project) => {\n                        const active = selectedProject ? selectedProject.name === project.name : false\n\n                        return <Nav.Link key={project.name} active={active} onClick={handleSelectProject(project.name)}>\n                            <ProjectIcon schema={project.schema} />{\" \"}{project.name}\n                        </Nav.Link>\n                    })\n                    : <div style={{ textAlign: \"center\", margin: \"1em\" }}>\n                        <span style={{ color: \"gray\" }}>Add your first project.</span>\n                        <div>\n                            <BsArrowDown size=\"1.5em\" color=\"gray\" style={{ marginTop: \"1.5em\" }} />\n                        </div>\n                    </div>\n            }\n        </Nav>\n\n        <ProjectModal onSubmitNewProject={handleCreateProject} />\n    </>\n}\n\n\n\nexport default ProjectList","import { createStore } from 'redux'\nimport { Project } from \"../core/entities/project\"\nimport { Action, ActionType } from \"./actions\"\n\nexport interface AppState {\n    selectedProject: Project | null\n    numProjects: number\n    numCreatedIssues: number\n}\n\nconst initialState: AppState = {\n    selectedProject: null\n    , numProjects: 0\n    , numCreatedIssues: 0\n}\n\nconst rootReducer = (state: AppState = initialState, action: Action): AppState => {\n    switch (action.type) {\n        case ActionType.SetSelectedProject:\n            return { ...state, selectedProject: action.payload as Project }\n        case ActionType.SetNumProjects:\n            return { ...state, numProjects: action.payload as number }\n        case ActionType.IncrementCreatedIssues:\n            return { ...state, numCreatedIssues: action.payload as number }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(rootReducer)\n\nexport default store","\nimport store from \"../../state/store\"\nimport { setSelectedProject, setNumProjects } from \"../../state/actions\"\nimport { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class ProjectListController {\n    repo: IProjectRepo\n    \n    constructor(repo: IProjectRepo) {\n        this.repo = repo\n    }\n\n    getProjects(): Project[] {\n        const projects = this.repo.getProjects()\n        store.dispatch(setNumProjects(projects.length))\n        return projects\n    }\n\n    createProject(project: Project): Project {\n        return this.repo.createProject(project)\n    }\n\n    getSelectedProject(): Project | null {\n        return store.getState().selectedProject\n    }\n\n    selectProject(name: string): Project | null {\n        const projects = this.getProjects()\n\n        for (let project of projects) {\n            if (project.name === name) {\n                store.dispatch(setSelectedProject(project))\n                return project\n            }\n        }\n\n        return null\n    }\n}","import { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class LocalStroageProjectRepo implements IProjectRepo {\n    getProjects(): Project[] {\n        const projectsStr = localStorage.getItem(\"projects\")\n\n        if (!projectsStr) {\n            return []\n        }\n\n        const projects: Project[] = JSON.parse(projectsStr)\n        \n        return projects.sort((a: Project, b: Project) => {\n            return a.name < b.name ? -1 : 1\n        })\n    }\n\n    createProject(project: Project): Project {\n        localStorage.setItem(\"projects\", JSON.stringify([...this.getProjects(), project]))\n        return project\n    }\n}","import ProjectList from \"./ProjectList\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport { LocalStroageProjectRepo } from \"../../repos/localstorage/projectrepo\"\n\ninterface SidebarProps {\n\n}\n\nconst Sidebar = (props: SidebarProps) => {\n    return <div className=\"sidebar\">\n        <ProjectList controller={new ProjectListController(new LocalStroageProjectRepo())} />\n    </div>\n}\n\nexport default Sidebar","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios, { AxiosRequestConfig } from \"axios\"\n\nexport class GithubIssueRepo implements IIssueRepo {\n    baseUrl: string\n    config: AxiosRequestConfig\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.config = {\n            headers: {\n                \"Authorization\": \"Bearer \" + authToken\n            }\n        }\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        try {\n            const resp = await axios.get(this.baseUrl + \"/issues\", this.config)\n            const { data } = resp\n\n            const issues = data.map((json: any) => {\n                return {\n                    id: json.number\n                    , state: json.state\n                    , title: json.title\n                    , body: json.body\n                    , comments: json.comments\n                }\n            })\n\n            return issues\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not retrieve your issues.\")\n            })\n        }\n\n    }\n\n    async createIssue(title: string, body: string): Promise<Issue> {\n        try {\n            const resp = await axios.post(this.baseUrl + \"/issues\", { title, body }, this.config)\n            const { data } = resp\n\n            const issue = {\n                id: data.number\n                , state: data.state\n                , title: data.title\n                , body: data.body\n                , comments: data.comments\n            }\n\n            return issue\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not create an issues.\")\n            })\n        }\n    }\n}","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios, { AxiosRequestConfig } from \"axios\"\n\nexport class GitlabIssueRepo implements IIssueRepo {\n    baseUrl: string\n    config: AxiosRequestConfig\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.config = {\n            headers: {\n                \"Authorization\": \"Bearer \" + authToken\n            }\n        }\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        try {\n            const resp = await axios.get(this.baseUrl + \"/issues\", this.config)\n            const { data } = resp\n\n            const issues = data.map((json: any) => {\n                return {\n                    id: json.id\n                    , state: json.state\n                    , title: json.title\n                    , body: json.body\n                    , comments: null\n                }\n            })\n\n            return issues\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not retrieve your issues.\")\n            })\n        }\n    }\n\n    async createIssue(title: string, body: string): Promise<Issue> {\n        try {\n            const resp = await axios.post(this.baseUrl + \"/issues\", { title, body }, this.config)\n            const { data } = resp\n\n            const issue = {\n                id: data.id\n                , state: data.state\n                , title: data.title\n                , body: data.body\n                , comments: null\n            }\n\n            return issue\n        } catch (err) {\n            return new Promise((_, reject) => {\n                reject(\"Oops! Could not create an issues.\")\n            })\n        }\n    }\n}","import { IIssueRepo, Issue } from \"../../core/entities/issue\";\nimport { GithubIssueRepo } from \"../../repos/github/issuerepo\";\nimport { GitlabIssueRepo } from \"../../repos/gitlab/issuerepo\";\nimport store from \"../../state/store\";\n\nexport class IssueListController {\n    repo: IIssueRepo | null\n\n    constructor() {\n        this.repo = null\n    }\n\n    getIssues(): Promise<Issue[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.getIssues()\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.getIssues()\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createIssue(title: string, body: string): Promise<Issue> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(project.baseUrl, project.authToken)\n                return repo.createIssue(title, body)\n            }\n\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.createIssue(title, body)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport axios from \"axios\"\n\nexport class GithubCommentRepo implements ICommentRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getComments(issueId: number): Promise<Comment[]> {\n        const result = await axios.get(this.baseUrl + `/issues/${issueId}/comments`, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        return result.data.map((json: any) => {\n            return {\n                id: json.id\n                , body: json.body\n                , createdAt: json.created_at\n                , updatedAt: json.updated_at\n                , author: {\n                    id: json.user.id\n                    , userName: json.user.login\n                }\n            }\n        })\n    }\n\n    async createComment(issueId: number, body: string): Promise<Comment> {\n        const result = await axios.post(this.baseUrl + `/issues/${issueId}/comments`, { body }, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        const json = result.data\n        \n        return {\n            id: json.id\n            , body: json.body\n            , createdAt: json.created_at\n            , updatedAt: json.updated_at\n            , author: {\n                id: json.user.id\n                , userName: json.user.login\n            }\n        }\n    }\n}","import { Comment } from \"../../core/entities/comment\";\nimport { GithubCommentRepo } from \"../../repos/github/commentrepo\";\nimport store from \"../../state/store\";\n\nexport class CommentListController {\n    getComments(issueId: number): Promise<Comment[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                return new Promise((resolve, reject) => {\n                    reject(\"Comments not implemented for gitlab.\")\n                })\n            }\n\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.getComments(issueId)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n\n    createComment(issueId: number, body: string): Promise<Comment> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            if (project.schema === \"gitlab\") {\n                return new Promise((resolve, reject) => {\n                    reject(\"Comments not implemented for gitlab.\")\n                })\n            }\n\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.createComment(issueId, body)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Card } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport moment from \"moment\"\n\nexport interface CommentCardProps {\n    comment: Comment\n}\n\nconst CommentCard = (props: CommentCardProps) => {\n    const createdAt = moment(props.comment.createdAt).format(\"llll\")\n\n    return <Card style={{marginBottom: \"1em\"}}>\n        <Card.Body>\n            <Card.Text>{props.comment.body}</Card.Text>\n            <Card.Text style={{color: \"gray\"}}><b>{props.comment.author.userName}</b> commented on {createdAt}</Card.Text>\n        </Card.Body>\n    </Card>\n}\n\nexport default CommentCard","import React, { useEffect, useState } from \"react\"\nimport { Form, Button } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport { CommentListController } from \"../controllers/CommentListController\"\n\nimport CommentCard from \"./Comment\"\n\nexport interface CommentListProps {\n    issueId: number\n    controller: CommentListController\n}\n\nconst CommentList = (props: CommentListProps) => {\n    const [comments, setComments] = useState<Comment[]>([])\n    const [myComment, setMyComment] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        const fetch = async () => {\n            try {\n                setComments(await props.controller.getComments(props.issueId))\n            } catch(err) {\n                setError(err)\n            }\n        }\n\n        setError(null)\n        fetch()\n\n        return () => {\n            setComments([])\n            setError(null)\n        }\n    }, [props.controller, props.issueId])\n\n    const handleChangeComment = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setMyComment(e.currentTarget.value)\n    }\n\n    const handleSubmitComment = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        if (!myComment.length) {\n            return\n        }\n\n        setComments([...comments, await props.controller.createComment(props.issueId, myComment)])\n        setMyComment(\"\")\n    }\n\n    if (error) {\n        return <p>{error}</p>\n    }\n\n    return <>\n        {\n            comments.map((comment: Comment) => <CommentCard key={comment.id} comment={comment} />)\n        }\n\n        <Form onSubmit={handleSubmitComment}>\n            <Form.Group>\n                <Form.Control style={{margin: \"0 0 1em 0\"}} as=\"textarea\" placeholder=\"Leave a comment.\" value={myComment} onChange={handleChangeComment} />\n                <Button type=\"submit\" size=\"sm\">Comment</Button>\n            </Form.Group>\n        </Form>\n\n    </>\n}\n\nexport default CommentList","import { useState } from \"react\"\nimport { Card } from \"react-bootstrap\"\nimport { Issue as IssueFields } from \"../../core/entities/issue\"\nimport { CommentListController } from \"../controllers/CommentListController\"\nimport CommentList from \"./CommentList\"\n\nexport interface IssueProps {\n    issue: IssueFields\n}\n\nconst Issue = (props: IssueProps) => {\n    const { issue } = props\n    const [showComments, setShowComments] = useState<boolean>(false)\n\n    return <Card style={{ marginBottom: \"1em\" }}>\n        <Card.Body>\n            <Card.Text>{issue.title}</Card.Text>\n            {\n                issue.body\n                    ? <Card.Text style={{ color: \"gray\" }}>{issue.body}</Card.Text>\n                    : <Card.Text style={{ color: \"gray\" }}><i>No description provided.</i></Card.Text>\n            }\n\n        </Card.Body>\n        <Card.Footer>\n            {\n                showComments\n                    ? <div>\n                        <CommentList issueId={issue.id} controller={new CommentListController()} />\n                        <span className=\"a text-primary\" onClick={() => setShowComments(false)}>Hide comments</span>\n                    </div>\n                    : <div>\n                        <span className=\"a text-primary\" onClick={() => setShowComments(true)}>Comments ({issue.comments})</span>\n                    </div>\n\n            }\n\n        </Card.Footer>\n    </Card>\n}\n\nexport default Issue","import { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Issue } from \"../../core/entities/issue\"\nimport { AppState } from \"../../state/store\"\n\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueCard from \"./Issue\"\n\nexport interface IssueListProps {\n    controller: IssueListController\n    numCreatedIssues: number\n}\n\nconst IssueList = (props: IssueListProps) => {\n    const [issues, setIssues] = useState<Issue[]>([])\n    const [error, setError] = useState<string | null>(null)\n\n    const { selectedProject } = useSelector((state: AppState) => state)\n\n\n    useEffect(() => {\n        const fetchIssues = async () => {\n            try {\n                setIssues(await props.controller.getIssues())\n            } catch (err) {\n                setError(err)\n            }\n        }\n\n        setIssues([])\n        setError(null)\n\n        if (selectedProject?.name) {\n            fetchIssues()\n        }\n\n        return () => {\n            setIssues([])\n            setError(null)\n        }\n    }, [props.controller, selectedProject?.name, props.numCreatedIssues])\n\n    if (error) {\n        return <p className=\"text-danger\">{error}</p>\n    }\n\n    return <>\n        {\n            issues.map((issue: Issue) => <IssueCard key={issue.id} issue={issue} />)\n        }\n    </>\n}\n\nexport default IssueList","import { useState } from \"react\"\nimport { Button, Modal, Form } from \"react-bootstrap\"\nimport { IssueModalController } from \"../controllers/IssueModalController\"\n\ninterface IssueModalProps {\n    onCreatedNewIssue: () => void\n    controller: IssueModalController\n}\n\nconst IssueModal = (props: IssueModalProps) => {\n    const [showModal, setShowModal] = useState<boolean>(false)\n\n    const [issueTitle, setIssueTitle] = useState<string>(\"\")\n    const [issueBody, setIssueBody] = useState<string>(\"\")\n\n    const handleShow = () => {\n        setIssueTitle(\"\")\n        setIssueBody(\"\")\n        setShowModal(true)\n    }\n\n    const handleClose = () => {\n        setShowModal(false)\n    }\n\n    const handleSave = async () => {\n        await props.controller.createIssue(issueTitle, issueBody)\n        props.onCreatedNewIssue()\n        setShowModal(false)\n    }\n\n    const handleUpdateTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIssueTitle(e.currentTarget.value)\n    }\n\n    const handleUpdateBody = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIssueBody(e.currentTarget.value.trim())\n    }\n\n    const valid = () => {\n        if (!issueTitle) {\n            return false\n        }\n\n        return true\n    }\n\n    return <>\n        <Button onClick={handleShow} style={{ float: \"right\", marginRight: \".5em\" }}>New Issue</Button>\n\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Create Issue</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"issueFormTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateTitle} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"issueFormBody\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control as=\"textarea\" onChange={handleUpdateBody} />\n                        {/* <Form.Text style={{color: \"gray\"}}>Optional</Form.Text> */}\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave} disabled={!valid()}>\n                    Create Issue\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default IssueModal","import { IIssueRepo, Issue } from \"../../core/entities/issue\";\nimport { GithubIssueRepo } from \"../../repos/github/issuerepo\";\nimport { GitlabIssueRepo } from \"../../repos/gitlab/issuerepo\";\nimport store from \"../../state/store\";\nimport { incrementCreatedIssues } from \"../../state/actions\"\n\nexport class IssueModalController {\n    async createIssue(title: string, body: string): Promise<Issue> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const { baseUrl, authToken, schema } = project\n\n            if (schema === \"gitlab\") {\n                const repo = new GitlabIssueRepo(baseUrl, authToken)\n                return repo.createIssue(title, body)\n            }\n\n            const repo = new GithubIssueRepo(baseUrl, authToken)\n            const issue = await repo.createIssue(title, body)\n\n            // Launch nuclear missiles\n            store.dispatch(incrementCreatedIssues(1))\n\n            return issue\n        }\n\n        return new Promise((_, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Row, Col, Button } from \"react-bootstrap\"\nimport { AppState } from \"../../state/store\"\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueList from \"./IssueList\"\nimport ProjectIcon from \"./ProjectIcon\"\nimport IssueModal from \"./IssueModal\"\nimport { IssueModalController } from \"../controllers/IssueModalController\"\n\nconst Project = () => {\n    const { selectedProject, numProjects } = useSelector((state: AppState) => state)\n    const [numCreatedIssues, setNumCreatedIssues] = useState<number>(0)\n\n    if (!selectedProject) {\n        if (!numProjects) {\n            return <>\n                <h4>Welcome to <b>ReIssue!</b></h4>\n                <p>ReIssue consolodates issue tracking from multiple repositories. So far its supports <a href=\"https://github.com\">Github</a>, <a href=\"https://gitlab.com\">Gitlab</a> and <a href=\"https://gitea.com\">Gitea</a>.</p>\n                <p>Get started by adding your first project!</p>\n            </>\n        }\n\n        return <></>\n    }\n\n    return <>\n        <Row>\n            <Col md={6}>\n                <h4><ProjectIcon schema={selectedProject.schema} /> {selectedProject.name}</h4>\n                <p>{selectedProject.baseUrl}</p>\n            </Col>\n            <Col>\n                <Button style={{ float: \"right\" }} variant=\"secondary\" disabled>Project Settings</Button>\n                <IssueModal controller={new IssueModalController()} onCreatedNewIssue={() => setNumCreatedIssues(numCreatedIssues + 1)} />\n                {/* <Button style={{ float: \"right\", marginRight: \".5em\" }}>New Issue</Button> */}\n            </Col>\n        </Row>\n\n        <IssueList numCreatedIssues={numCreatedIssues} controller={new IssueListController()} />\n    </>\n}\n\nexport default Project","import Sidebar from \"./presentation/components/Sidebar\"\nimport Project from \"./presentation/components/Project\"\n\nconst App = () => {\n\treturn <div>\n\t\t<Sidebar />\n\t\t<div style={{marginLeft: \"15em\"}}>\n\t\t\t<Project />\n\t\t</div>\n\t</div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\n\nimport store from \"./state/store\"\n\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}