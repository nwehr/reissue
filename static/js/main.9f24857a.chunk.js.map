{"version":3,"sources":["state/actions.ts","repos/github/commentrepo.ts","state/store.ts","presentation/controllers/CommentListController.ts","presentation/components/Comment.tsx","presentation/components/CommentList.tsx","presentation/components/Issue.tsx","presentation/components/IssueList.tsx","presentation/components/ProjectList.tsx","presentation/controllers/ProjectListController.ts","repos/localstorage/projectrepo.ts","presentation/components/Sidebar.tsx","repos/github/issuerepo.ts","presentation/controllers/IssueListController.ts","App.js","index.js"],"names":["ActionType","GithubCommentRepo","baseUrl","authToken","this","issueId","a","axios","get","headers","result","data","map","json","id","body","createdAt","created_at","updatedAt","updated_at","author","user","userName","login","setSelectedProject","project","type","SetSelectedProject","payload","initialState","selectedProject","store","createStore","state","action","CommentListController","getState","getComments","Promise","resolve","reject","CommentCard","props","moment","comment","format","Card","Body","Text","CommentList","useState","comments","setComments","useEffect","controller","fetch","Comment","Issue","style","marginBottom","Title","title","color","Footer","IssueList","issues","setIssues","useSelector","getIssues","name","issue","NewProjectModal","showModal","setShowModal","schema","setProject","handleClose","Button","onClick","position","bottom","left","width","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","onChange","e","currentTarget","value","as","disabled","variant","onSubmitNewProject","ProjectList","getProjects","projects","setProjects","getSelectedProject","Nav","className","length","active","Link","eventKey","selectProject","textAlign","margin","size","marginTop","p","createProject","ProjectListController","repo","dispatch","LocalStroageProjectRepo","projectsStr","localStorage","getItem","JSON","parse","setItem","stringify","Sidebar","GithubIssueRepo","number","IssueListController","App","marginLeft","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f24857a.chunk.js","sourcesContent":["import { Project } from \"../core/entities/project\"\n\nexport enum ActionType {\n    SetSelectedProject\n}\n\nexport interface Action {\n    type: ActionType\n    payload: string | Project\n}\n\nexport function setSelectedProject(project: Project): Action {\n    return {\n        type: ActionType.SetSelectedProject\n        , payload: project\n    }\n}","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport axios from \"axios\"\n\nexport class GithubCommentRepo implements ICommentRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getComments(issueId: number): Promise<Comment[]> {\n        const result = await axios.get(this.baseUrl + `/issues/${issueId}/comments`, { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n        return result.data.map((json: any) => {\n            return { \n                id: json.id\n                , body: json.body\n                , createdAt: json.created_at\n                , updatedAt: json.updated_at\n                , author: { \n                    id: json.user.id\n                    , userName: json.user.login \n                } \n            }\n        })\n    }\n}","import { createStore } from 'redux'\nimport { Project } from \"../core/entities/project\"\nimport { Action, ActionType } from \"./actions\"\n\nexport interface AppState {\n    selectedProject: Project | null\n}\n\nconst initialState: AppState = {\n    selectedProject: null\n}\n\nconst rootReducer = (state: AppState = initialState, action: Action): AppState => {\n    switch (action.type) {\n        case ActionType.SetSelectedProject:\n            return { ...state, selectedProject: action.payload as Project }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(rootReducer)\n\nexport default store","import { Comment, ICommentRepo } from \"../../core/entities/comment\";\nimport { GithubCommentRepo } from \"../../repos/github/commentrepo\";\nimport store from \"../../state/store\";\n\nexport class CommentListController {\n    getComments(issueId: number): Promise<Comment[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const repo = new GithubCommentRepo(project.baseUrl, project.authToken)\n            return repo.getComments(issueId)\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Card } from \"react-bootstrap\"\nimport { Comment } from \"../../core/entities/comment\"\nimport moment from \"moment\"\n\nexport interface CommentCardProps {\n    comment: Comment\n}\n\nconst CommentCard = (props: CommentCardProps) => {\n    const createdAt = moment(props.comment.createdAt).format(\"llll\")\n\n    return <Card>\n        <Card.Body>\n            <Card.Text>{props.comment.body}</Card.Text>\n            <Card.Text>{createdAt} <b>{props.comment.author.userName}</b></Card.Text>\n        </Card.Body>\n    </Card>\n}\n\nexport default CommentCard","import { useEffect, useState } from \"react\"\nimport { Comment, ICommentRepo } from \"../../core/entities/comment\"\nimport { MemCommentRepo } from \"../../repos/commentrepo\"\nimport { CommentListController } from \"../controllers/CommentListController\"\n\nimport CommentCard from \"./Comment\"\n\nexport interface CommentListProps {\n    issueId: number\n    controller: CommentListController\n}\n\nconst CommentList = (props: CommentListProps) => {\n    const [comments, setComments] = useState<Comment[]>([])\n\n    useEffect(() => {\n        const fetch = async () => {\n            setComments(await props.controller.getComments(props.issueId))\n        }\n\n        fetch()\n    })\n\n    return <>\n        {\n            comments.map((comment: Comment) => <CommentCard comment={comment} />)\n        }\n    </>\n}\n\nexport default CommentList","import { Card } from \"react-bootstrap\"\nimport { CommentListController } from \"../controllers/CommentListController\"\nimport CommentList from \"./CommentList\"\n\nexport interface IssueProps {\n    id: number\n    title: string\n    body: string\n}\n\nconst Issue = (props: IssueProps) => {\n    return <Card style={{ marginBottom: \"1em\" }}>\n        <Card.Body>\n            <Card.Title>{props.title}</Card.Title>\n            {\n                props.body\n                    ? <Card.Text>{props.body}</Card.Text>\n                    : <Card.Text><i style={{color: \"gray\"}}>No description provided.</i></Card.Text>\n            }\n\n        </Card.Body>\n        <Card.Footer>\n            <CommentList issueId={props.id} controller={new CommentListController()} />\n        </Card.Footer>\n    </Card>\n}\n\nexport default Issue","import { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Issue } from \"../../core/entities/issue\"\nimport { AppState } from \"../../state/store\"\n\nimport { IssueListController } from \"../controllers/IssueListController\"\nimport IssueCard from \"./Issue\"\n\nexport interface IssueListProps {\n    controller: IssueListController\n}\n\nconst IssueList = (props: IssueListProps) => {\n    const [issues, setIssues] = useState<Issue[]>([])\n    const selectedProject = useSelector((state: AppState) => state.selectedProject)\n\n    useEffect(() => {\n        const fetch = async () => {\n            setIssues(await props.controller.getIssues())\n        }\n\n        setIssues([])\n        fetch()\n    }, [selectedProject?.name])\n\n    return <>\n        {\n            issues.map((issue: Issue) => <IssueCard id={issue.id} title={issue.title} body={issue.body} />)\n        }\n    </>\n}\n\nexport default IssueList","import React, { useState } from \"react\"\nimport { Button, Modal, Form, Nav } from \"react-bootstrap\"\nimport { BsArrowDown } from \"react-icons/bs\"\nimport { Project } from \"../../core/entities/project\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\n\nexport interface ProjectListProps {\n    controller: ProjectListController\n}\n\nconst ProjectList = (props: ProjectListProps) => {\n    const { controller } = props\n    const [projects, setProjects] = useState<Project[]>(controller.getProjects())\n    const [selectedProject, setSelectedProject] = useState<Project | null>(controller.getSelectedProject())\n\n    const handleCreateProject = (project: Project) => {\n        const p = controller.createProject(project.name, project.baseUrl, project.authToken, project.schema)\n        setProjects([...projects, p])\n    }\n\n    const handleSelectProject = (name: string) => () => {\n        setSelectedProject(controller.selectProject(name))\n    }\n\n    return <>\n        <Nav className=\"flex-column\">\n            {\n                projects.length\n                    ? projects.map((project: Project) => {\n                        const active = selectedProject ? selectedProject.name == project.name : false\n\n                        return <Nav.Link active={active} eventKey={project.name} onClick={handleSelectProject(project.name)}>\n                            {project.name}\n                        </Nav.Link>\n                    })\n                    : <div style={{ textAlign: \"center\", margin: \"1em\" }}>\n                        <span style={{ color: \"gray\" }}>Add your first project.</span>\n                        <div>\n                            <BsArrowDown size=\"1.5em\"  color=\"gray\" style={{marginTop: \"1.5em\"}} />\n                        </div>\n                    </div>\n            }\n        </Nav>\n\n        <NewProjectModal onSubmitNewProject={handleCreateProject} />\n    </>\n}\n\ninterface NewProjectModalProps {\n    onSubmitNewProject: (project: Project) => void\n}\n\nconst NewProjectModal = (props: NewProjectModalProps) => {\n    const [showModal, setShowModal] = useState<boolean>(false)\n    const [project, setProject] = useState<Project>({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n\n    const handleShow = () => {\n        setProject({ name: \"\", baseUrl: \"\", authToken: \"\", schema: \"github\" })\n        setShowModal(true)\n    }\n\n    const handleClose = () => {\n        setShowModal(false)\n    }\n\n    const handleSave = () => {\n        props.onSubmitNewProject(project)\n        setShowModal(false)\n    }\n\n    const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, name: e.currentTarget.value })\n    }\n\n    const handleUpdateBaseUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, baseUrl: e.currentTarget.value })\n    }\n\n    const handleUpdateAuthToken = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setProject({ ...project, authToken: e.currentTarget.value })\n    }\n\n    const valid = () => {\n        if (!project.name || !project.baseUrl || !project.authToken) {\n            return false\n        }\n\n        return true\n    }\n\n    return <>\n        <Button onClick={handleShow} style={{ position: \"absolute\", bottom: \"1em\", left: \"1em\", width: \"calc(100% - 2em)\" }}>Add Project</Button>\n\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"formName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateName} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBaseUrl\">\n                        <Form.Label>Base URL</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateBaseUrl} />\n                        <Form.Text>{\"https://api.github.com/repos/{owner}/{project}\"}</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Personal Auth Token</Form.Label>\n                        <Form.Control type=\"text\" onChange={handleUpdateAuthToken} />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formAuthToken\">\n                        <Form.Label>Schema</Form.Label>\n                        <Form.Control as=\"select\" disabled>\n                            <option>github</option>\n                            <option>gitlab</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave} disabled={!valid()}>\n                    Add Project\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default ProjectList","\nimport store from \"../../state/store\"\nimport { setSelectedProject } from \"../../state/actions\"\nimport { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class ProjectListController {\n    repo: IProjectRepo\n    \n    constructor(repo: IProjectRepo) {\n        this.repo = repo\n    }\n\n    getProjects(): Project[] {\n        return this.repo.getProjects()\n    }\n\n    createProject(name: string, baseUrl: string, authToken: string, schema: string = \"github\"): Project {\n        return this.repo.createProject(name, baseUrl, authToken, schema)\n    }\n\n    getSelectedProject(): Project | null {\n        return store.getState().selectedProject\n    }\n\n    selectProject(name: string): Project | null {\n        const projects = this.getProjects()\n\n        for (let project of projects) {\n            if (project.name == name) {\n                store.dispatch(setSelectedProject(project))\n                return project\n            }\n        }\n\n        return null\n    }\n}","import { Project, IProjectRepo } from \"../../core/entities/project\"\n\nexport class LocalStroageProjectRepo implements IProjectRepo {\n    getProjects(): Project[] {\n        const projectsStr = localStorage.getItem(\"projects\")\n\n        if (!projectsStr) {\n            return []\n        }\n\n        return JSON.parse(projectsStr)\n    }\n\n    createProject(name: string, baseUrl: string, authToken: string, schema: string = \"github\"): Project {\n        const project = { name, baseUrl, authToken, schema }\n        localStorage.setItem(\"projects\", JSON.stringify([...this.getProjects(), project]))\n        return project\n    }\n}","import React from \"react\"\nimport { Nav, NavDropdown } from \"react-bootstrap\"\n\nimport ProjectList from \"./ProjectList\"\nimport { ProjectListController } from \"../controllers/ProjectListController\"\nimport { LocalStroageProjectRepo } from \"../../repos/localstorage/projectrepo\"\n\ninterface SidebarProps {\n\n}\n\nconst Sidebar = (props: SidebarProps) => {\n    return <div className=\"sidebar\">\n        <ProjectList controller={new ProjectListController(new LocalStroageProjectRepo())} />\n    </div>\n}\n\nexport default Sidebar","import { Issue, IIssueRepo } from \"../../core/entities/issue\";\nimport axios from \"axios\"\n\nexport class GithubIssueRepo implements IIssueRepo {\n    baseUrl: string\n    authToken: string\n\n    constructor(baseUrl: string, authToken: string) {\n        this.baseUrl = baseUrl\n        this.authToken = authToken\n    }\n\n    async getIssues(): Promise<Issue[]> {\n        const result = await axios.get(this.baseUrl + \"/issues\", { headers: { \"Authorization\": \"Bearer \" + this.authToken } })\n\n        return result.data.map((json: any) => {\n            const { number, state, title, body } = json\n            return { id: number, state, title, body }\n        })\n    }\n}","import { IIssueRepo, Issue } from \"../../core/entities/issue\";\nimport { GithubIssueRepo } from \"../../repos/github/issuerepo\";\nimport store from \"../../state/store\";\n\nexport class IssueListController {\n    repo: IIssueRepo | null\n\n    constructor() {\n        this.repo = null\n    }\n\n    getIssues(): Promise<Issue[]> {\n        const project = store.getState().selectedProject\n\n        if (project) {\n            const repo = new GithubIssueRepo(project.baseUrl, project.authToken)\n            return repo.getIssues()\n        }\n\n        return new Promise((resolve, reject) => {\n            reject(\"No project selected\")\n        })\n    }\n}","import { Row, Col } from \"react-bootstrap\"\nimport IssueList from \"./presentation/components/IssueList\"\nimport { MemIssueRepo } from \"./repos/issuerepo\"\nimport Sidebar from \"./presentation/components/Sidebar\"\nimport { IssueListController } from \"./presentation/controllers/IssueListController\"\n\nconst App = () => {\n\treturn <div>\n\t\t<Sidebar />\n\t\t<div style={{marginLeft: \"16em\"}}>\n\t\t\t<IssueList controller={new IssueListController()} />\n\t\t</div>\n\t</div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\n\nimport store from \"./state/store\"\n\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}